% -*- mode: noweb; noweb-default-code-mode: R-mode; -*-


\documentclass{article}

\usepackage{arxiv}

\usepackage[utf8]{inputenc} % allow utf-8 input
\usepackage[T1]{fontenc}    % use 8-bit T1 fonts
\usepackage{hyperref}       % hyperlinks
\usepackage{url}            % simple URL typesetting
\usepackage{booktabs}       % professional-quality tables
\usepackage{amsfonts}       % blackboard math symbols
\usepackage{amssymb}        % needed for \leqslant
\usepackage{amsmath}        % needed for cases
\usepackage{nicefrac}       % compact symbols for 1/2, etc.
\usepackage{microtype}      % microtypography
\usepackage{lipsum}		% Can be removed after putting your text content
\usepackage{graphicx}
\usepackage[numbers]{natbib}
\usepackage{doi}
\usepackage{wrapfig}


\title{Fast multivariate polynomials in R: the mvp package}

%\date{September 9, 1985}	% Here you can change the date presented in the paper title
%\date{} 					% Or removing it

\author{ \href{https://orcid.org/0000-0001-5982-0415}{\includegraphics[width=0.03\textwidth]{orcid.pdf}\hspace{1mm}Robin K. S.~Hankin}\thanks{\href{https://academics.aut.ac.nz/robin.hankin}{work};  
\href{https://www.youtube.com/watch?v=JzCX3FqDIOc&list=PL9_n3Tqzq9iWtgD8POJFdnVUCZ_zw6OiB&ab_channel=TrinTragulaGeneralRelativity}{play}} \\
 Auckland University of Technology\\
	\texttt{hankin.robin@gmail.com} \\
}

% Uncomment to remove the date
%\date{}

% Uncomment to override  the `A preprint' in the header
%\renewcommand{\headeright}{Technical Report}
%\renewcommand{\undertitle}{Technical Report}
\renewcommand{\shorttitle}{The \textit{mvp} package}

%%% Add PDF metadata to help others organize their library
%%% Once the PDF is generated, you can check the metadata with
%%% $ pdfinfo template.pdf
\hypersetup{
pdftitle={Fast multivariate polynomials in R},
pdfsubject={q-bio.NC, q-bio.QM},
pdfauthor={Robin K. S.~Hankin},
pdfkeywords={multivariate polynomials}
}

\begin{document}
\maketitle

%% an abstract and keywords
\begin{abstract}
  In this short article I introduce the {\tt mvp} package, which
  provides some functionality for handling multivariate polynomials.  The package
  uses the~{\tt C++} Standard Template Library's {\tt map}
  class to store and retrieve elements.    The package is available on CRAN at
  \url{https://CRAN.R-project.org/package=mvp}.
\end{abstract}
\keywords{Multivariate polynomials}

<<setup,echo=FALSE,print=FALSE>>=
ignore <- require("mvp")
options(prompt = "R> ", continue = "+  ", width = 70, useFancyQuotes = FALSE)
@ 

\SweaveOpts{}

\section{Introduction}

\setlength{\intextsep}{0pt}
\begin{wrapfigure}{r}{0.2\textwidth}
  \begin{center}
\includegraphics[width=1in]{mvp.png}
  \end{center}
\end{wrapfigure}

The {\tt mvp} package provides some functionality for fast
manipulation of multivariate polynomials in the R programming
language~\citep{rcore2022}.  It uses the Standard Template library of
{\tt C++}, commonly known as the {\tt STL}, and is comparable in speed
to the {\tt spray} package~\cite{hankin2022_spray} for sparse arrays, while
while retaining the symbolic capabilities of the {\tt mpoly}
package~\cite{kahle2013}; the package includes some timing results.
The {\tt mvp} package uses the excellent print and coercion methods of
{\tt mpoly}.  The {\tt mvp} package provides improved speed over {\tt
  mpoly} but retains some of the sophisticated substitution mechanism.

\section{The {\tt STL} map class}

A ``map'' is a sorted associative container that contains key-value
pairs with unique keys.  It is interesting here because search and
insertion operations have logarithmic complexity.  Multivariate
polynomials are considered to be the sum of a finite number of {\bf
  terms}, each multiplied by a coefficient.  A term is something like
$x^2y^3z$.  We may consider this term to be the map

\begin{verbatim}
{"x" -> 2, "y" -> 3, "z" -> 1}
\end{verbatim}

where the map takes symbols to their (integer) power; it is understood
that powers are nonzero.  An {\tt mvp} object is a map from terms to
their coefficients; thus $7xy^2 -3x^2yz^5$ would be

\begin{verbatim}
{{"x" -> 1, "y" -> 2} -> 7, {"x" -> 2, 'y" -> 1, "z" ->5} -> -3}
\end{verbatim}

and we understand that coefficients are nonzero.  In {\tt C++} the
declarations would be

\begin{verbatim}
typedef vector <signed int> mypowers;  
typedef vector <string> mynames;  

typedef map <string, signed int> term; 
typedef map <term, double> mvp; 
\end{verbatim}

Thus a term maps a string to a (signed) integer, and a {\tt mvp} maps
terms to doubles.  One reason why the {\tt map} class is fast is that
the order in which the keys are stored is undefined: the compiler may
store them in the order which it regards as most propitious.  This is
not an issue for the maps considered here as addition and
multiplication are commutative and associative.

Note also that constant terms are handled with no difficulty
(constants are simply maps from the empty map to its value), as is the
zero polynomial (which is simply an empty map).

\subsection{The package in use}

Consider a simple multivariate polynomial $3xy+z^3+xy^6z$ and its
representation in the following R session:


<<mvpdefinep>>=
library("mvp",quietly=TRUE)
(p <- as.mvp("3 x y + z^3 + x y^6 z"))
@ 


Coercion and printing are accomplished by the {\tt mpoly} package
(there is no way I could improve upon
Kahle's work).  Note carefully that the printed representation of
the mvp object is created by the {\tt mpoly} package and the print method
can rearrange both the terms of the polynomial
($3xy+z^3+xy^6z = z^3+3xy+xy^6z$, for example) and the symbols within
a term ($3xy=3yx$, for example) to display the polynomial in a
human-friendly form.

However, note carefully that such rearranging does not affect the
mathematical properties of the polynomial itself.  In the {\tt mvp}
package, the order of the terms is not preserved (or even defined) in
the internal representation of the object; and neither is the order of
the symbols within a single term.  Although this might sound odd, if
we consider a marginally more involved situation, such as

<<stoatgoat>>=
(M <- as.mvp("3 stoat goat^6 -4 + 7 stoatboat^3 bloat -9 float boat goat gloat^6"))
dput(M)
@ 

it is not clear that any human-discernible ordering is preferable to
any other, and we would be better off letting the compiler decide a
propitious ordering.  In any event, the {\tt mpoly} package can
specify a print order:


<<specifyprintorder>>=
print(M,order="lex", varorder=c("stoat","goat","boat","bloat","gloat","float","stoatboat"))
@ 



\subsection{Arithmetic operations}

The arithmetic operations {\tt *}, {\tt +}, {\tt -} and \verb|^| work
as expected:

<<asexpected>>=
(S1 <- rmvp(5,2,2,4))
(S2 <- rmvp(5,2,2,4))
S1 + S2
S1 * S2
S1^2
@ 


\subsection{Substitution}

The package has two substitution functionalities.  Firstly, we can
substitute one or more variables for a numeric value.  Define a mvp
object:

<<defineS3obj>>=
(S3 <- as.mvp("x + 5 x^4 y + 8 y^2 x z^3"))
@ 


And then we may substitute $x=1$:

<<nextsub>>=
subs(S3, x = 1)
@ 

Note the natural R idiom, and that the return value is another mvp
object.  We may substitute for the other variables:

<<natidiom>>=
subs(S3, x = 1, y = 2, z = 3)
@ 


(in this case, the default behaviour is to return the the resulting
polynomial coerced to a scalar).  We can suppress the coercion using
the {\tt lose} argument:

<<uselose>>=
subs(S3, x = 1, y = 2, z = 3,lose=FALSE)
@ 

The idiom also allows one to substitute a variable for an {\tt mvp}
object:

<<>>=
subs(as.mvp("a+b+c"), a="x^6")
@ 


Note carefully that {\tt subs()} depends on the order of substitution:

<<subsdependsonorder>>=
subs(as.mvp("a+b+c"), a="x^6",x="1+a")
subs(as.mvp("a+b+c"), x="1+a",a="x^6")
@ 

  
\subsection{Pipes}

Substitution works well with pipes:

<<subwithpipes>>=
as.mvp("a+b") %>% subs(a="a^2+b^2") %>% subs(b="x^6")
@ 


\subsection{Vectorised substitution}

Function {\tt subvec()} allows one to substitute variables for numeric
values using vectorised idiom:

<<usevectorisedsub>>=
p <- rmvp(6,2,2,letters[1:3])
p
subvec(p,a=1,b=2,c=1:5)   # supply a named list of vectors
@ 



\subsection{Differentiation}

Differentiation is implemented.  First we have the {\tt deriv()}
method:

<<showthederivmethod>>=
(S <- as.mvp("a + 5 a^5*b^2*c^8 -3 x^2 a^3 b c^3"))
deriv(S, letters[1:3])
deriv(S, rev(letters[1:3]))  # should be the same.
@ 

Also a slightly different form: {\tt aderiv()}, here used to evaluate
$\frac{\partial^6S}{\partial a^3\partial b\partial c^2}$:

<<useaderiv>>=
aderiv(S, a = 3, b = 1, c = 2)
@ 

Again, pipes work quite nicely:


<<pipesworknicely>>=
S %<>% aderiv(a=1,b=2) %>% subs(c="x^4") %>% `+`(as.mvp("o^99"))
S
@ 


\subsection{Taylor series}

The package includes functionality to deal with Taylor and Laurent series:

<<taylorseries>>=
(X <- as.mvp("1+x+x^2 y")^3)
trunc(X,3)         # truncate, retain only terms with total power <= 3
trunc1(X,x=3)    # truncate, retain only terms with  power of x <= 3
onevarpow(X,x=3) # retain only terms with power of x == 3
@ 

<<secondordertaylor>>=
## second order taylor expansion of f(x)=sin(x+y) for x=1.1, about x=1:
sinxpy <- horner("x+y",c(0,1,0,-1/6,0,+1/120,0,-1/5040))  # sin(x+y)
dx <- as.mvp("dx")
t2 <- sinxpy  + aderiv(sinxpy,x=1)*dx + aderiv(sinxpy,x=2)*dx^2/2
(t2 %<>% subs(x=1,dx=0.1))  # (Taylor expansion of sin(y+1.1), left in symbolic form)
(t2 %>% subs(y=0.3))  - sin(1.4)  # numeric; should be small
@ 

Function {\tt series()} will decompose an {\tt mvp} object into a power
series in a single variable:

<<powerseriessinglevariablen>>=
p <- as.mvp("a^2 x b + x^2 a b + b c x^2 + a b c + c^6 x")
p
series(p,'x')
@ 


This works nicely with {\tt subs()} if we wish to take a power series
about {\tt x-v}, where {\tt v} is any {\tt mvp} object.  For example:

<<powerseriesaboutxminusv>>=
p %>% subs(x="xmv+a+b") %>% series("xmv") 
@ 

is a series in powers of {\tt x-a-b}.  We may perform a consistency
check by a second substitution, returning us to the original
expression:

<<consistencybacksubstitutecheck>>=
p == p %>% subs(x="xmv+a+b") %>% subs(xmv="x-a-b")
@ 

If function {\tt series()} is given a variable name ending in {\tt
  \_m\_foo}, where {\tt foo} is any variable name, then this is
typeset as {\tt (x-foo)}.  For example:

<<typesetxminusfoo>>=
as.mvp('x^3 + x*a') %>% subs(x="x_m_a + a") %>% series("x_m_a")
@ 

So above we see the expansion of $x^2+ax$ in powers of $x-a$.  If we
want to see the expansion of a mvp in terms of a more complicated
expression then it is better to use a nonce variable {\tt v}:

<<noncevariablev>>=
as.mvp('x^2 + x*a+b^3') %>% subs(x="x_m_v + a^2+b") %>% series("x_m_v")
@ 

where it is understood that $v=a+b^2$.  Function {\tt taylor()} is a
convenience wrapper that does some of the above in one step:

<<conveniencewrapper>>=
p <- as.mvp("1+x-x*y+a")^2
taylor(p,'x','a')
@ 


But it's not as good as I expected it to be and frankly it's overkill.

\subsection{Extraction}

Given a multivariate polynomial, one often needs to extract certain
terms.  Because the terms of an {\tt mvp} object have an
implementation-dependent order, this can be difficult.  But we can use
function {\tt onevarpow()}:

<<onevarpowp>>=
P <- as.mvp("1 + z + y^2 + x*z^2 +  x*y")^4
onevarpow(P,x=1,y=2)
@ 

\subsection{Negative powers}


The {\tt mvp} package handles negative powers, although the idiom is not
perfect and I am still working on it.  There is the {\tt invert()}
function:

<<useinvertfunc>>=
(p <- as.mvp("1+x+x^2 y"))
invert(p)
@ 

In the above, {\tt p} is a regular multivariate polynomial which
includes negative powers.  It obeys the same arithmetic rules as other
mvp objects:

<<samearithasotherobjects>>=
p + as.mvp("z^6")
@ 


\section{The {\tt disordR} package}

It is possible to examine the coefficients of an {\tt mvp} object:

<<introdisord>>=
a <- as.mvp("5 + 8*x^2*y - 13*y*x^2 + 11*z - 3*x*yz")
a
coeffs(a)
@ 

Above, note that the result of {\tt coeffs()} is a {\tt disord}
object, defined in the {\tt disordR}
package~\cite{hankin2022_disordR}.  The order of the elements
unspecified as the {\tt STL} map class holds the keys and values in an
implementation-specific order.  This device stops the user from
illegal operations on the coefficients.  For example, suppose we had
another mvp object, b:

<<defineb>>=
b <- a*2
b
@ 

Then we could not add the coefficients of the two objects

\begin{Schunk}
\begin{Sinput}
R> coeffs(a) + coeffs(b)
\end{Sinput}
\begin{Soutput}
Error in check_matching_hash(e1, e2, match.call()) : 
hash codes 64e403dc35ccd68b1bcbd3e0444c72f4e57b50fd and d4875b2ede120f28db25aa644df3ea95f5be7d58 do not match
\end{Soutput}
\end{Schunk}


above, we get an error because the coefficients of {\tt a} and {\tt b}
are possibly stored in a different order and therefore vector
addition makes no sense.  However, we can operate on coefficients of
a single {\tt mvp} object at will:

<<disordRsingleobjectstuff>>=
coeffs(a) > 0
coeffs(a) + coeffs(a)^4
@

Extraction also works but subject to standard {\tt disordR} idiom
restrictions:

<<disordextract>>=
coeffs(a)[coeffs(a) > 0]
@ 

But ``mixing" objects is forbidden:

\begin{verbatim}
coeffs(a)[coeffs(b) > 0]
\end{verbatim}

Extraction methods work, again subject to {\tt disordR} restrictions:


<< disordreplace>>=
coeffs(a)[coeffs(a)<0] <- coeffs(a)[coeffs(a)<0] + 1000 # add 1000 to every negative coefficient
a
@

In cases like this where the replacement object is complicated, using
{\tt magrittr} would simplify the idiom and reduce the opportunity for
error:

<<usemagrittrpipe>>=
library("magrittr")
b
coeffs(b)[coeffs(b)%%3==1] %<>% `+`(100)  # add 100 to every element equal to 1 modulo 3
b
@ 

One good use for this is to "zap" small elements:

<<goodzapsmall>>=
x <- as.mvp("1 - 0.11*x + 0.005*x*y")^2
x
@ 

Then we can zap as follows:

<<zapmvp>>=
cx <- coeffs(x)
cx[abs(cx) < 0.01] <- 0
coeffs(x) <- cx
x
@ 


(I should write a method for {\tt zapsmall()} that does this)


\section{Example: multivariate generating functions}

Here I give an example of the {\tt mvp} package in use,
following~\cite{hankin2022_spray}.  The generating function for a
chess knight is given by function {\tt knight()}, whose argument is
the dimension of the board.  Thus for a 2D board we have

<<knight2>>=
knight(2)
@ 

This object has 8 terms, one for each move that a knight has on an
unrestricted board.  The powers of {\tt a} and {\tt b} correspond to
horizontal and vertical directions respectively.

How many ways are there for a 4D knight to return to its starting
square after four moves?  Answer:

<<answertoknight>>=
constant(knight(4)^4)
@

\bibliographystyle{plain}
\bibliography{mvp_arxiv}
\end{document}
