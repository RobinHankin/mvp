[{"path":"https://robinhankin.github.io/mvp/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor covenant code of conduct","title":"Contributor covenant code of conduct","text":"members, contributors, leaders wish make participation community pleasant productive experience everyone. try act interact ways contribute open, welcoming, inclusive, healthy community. assume good faith, per WP:AGF. Examples behaviour contributes positive environment community include: Demonstrating empathy kindness toward people Communicating respectfully differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community","code":""},{"path":"https://robinhankin.github.io/mvp/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to mvp","title":"Contributing to mvp","text":"Thank considering contributing mvp! appreciate interest making project better. Please read adhere Code Conduct maintain safe, welcoming, inclusive environment. Various forms contributions welcome: Bug Reports: Feel free report bugs encounter. Documentation: Typos, clarity issues, missing guides: help welcome . Feature Discussions/Requests: Got idea? Open issue discuss potential. Code Contributions: code contributions welcome. Tests checks run CI, however locally one can use: devtools::test(). Ideally change documented. Major changes vignettes.","code":""},{"path":"https://robinhankin.github.io/mvp/articles/mvp.html","id":"the-stl-map-class","dir":"Articles","previous_headings":"","what":"The STL map class","title":"The `mvp` package: fast multivariate polynomials in R","text":"map sorted associative container contains key-value pairs unique keys. interesting search insertion operations logarithmic complexity. Multivariate polynomials considered sum finite number terms, multiplied coefficient. term something like x2y3zx^2y^3z. may consider term map map takes symbols (integer) power; understood powers nonzero. mvp object map terms coefficients; thus 7xy2−3x2yz57xy^2 -3x^2yz^5 understand coefficients nonzero. C++ declarations Thus term maps string (signed) integer, mvp maps terms doubles. One reason map class fast order keys stored undefined: compiler may store order regards propitious. issue maps considered addition multiplication commutative associative. Note also constant terms handled difficulty (constants simply maps empty map value), zero polynomial (simply empty map).","code":"{\"x\" -> 2, \"y\" -> 3, \"z\" -> 1} {{\"x\" -> 1, \"y\" -> 2} -> 7, {\"x\" -> 2, 'y\" -> 1, \"z\" ->5} -> -3} typedef vector <signed int> mypowers;   typedef vector <string> mynames;    typedef map <string, signed int> term;  typedef map <term, double> mvp;"},{"path":"https://robinhankin.github.io/mvp/articles/mvp.html","id":"the-package-in-use","dir":"Articles","previous_headings":"The STL map class","what":"The package in use","title":"The `mvp` package: fast multivariate polynomials in R","text":"Consider simple multivariate polynomial 3xy+z3+xy6z3xy+z^3+xy^6z representation following R session: Coercion printing accomplished mpoly package (way improve upon Kahle’s work). Note carefully printed representation mvp object created mpoly package print method can rearrange terms polynomial (3xy+z3+xy6z=z3+3xy+xy6z3xy+z^3+xy^6z = z^3+3xy+xy^6z, example) symbols within term (3xy=3yx3xy=3yx, example) display polynomial human-friendly form. However, note carefully rearranging affect mathematical properties polynomial . mvp package, order terms preserved (even defined) internal representation object; neither order symbols within single term. Although might sound odd, consider marginally involved situation, clear human-discernible ordering preferable , better letting compiler decide propitious ordering. event, mpoly package can specify print order: Note passing variable names may character string, just single letters.","code":"library(\"mvp\",quietly=TRUE) library(\"magrittr\") (p <- as.mvp(\"3 x y + z^3 + x y^6 z\")) #> mvp object algebraically equal to #> 3 x y + x y^6 z + z^3 (M <- as.mvp(\"3 stoat goat^6 -4 + 7 stoatboat^3 bloat -9 float boat goat gloat^6\")) #> mvp object algebraically equal to #> -4 + 7 bloat stoatboat^3 - 9 boat float gloat^6 goat + 3 goat^6 stoat dput(M) #> structure(list(names = list(character(0), c(\"bloat\", \"stoatboat\" #> ), c(\"boat\", \"float\", \"gloat\", \"goat\"), c(\"goat\", \"stoat\")),  #>     power = list(integer(0), c(1L, 3L), c(1L, 1L, 6L, 1L), c(6L,  #>     1L)), coeffs = c(-4, 7, -9, 3), \"a42fbf7de80773710e0bf126ddb55cd6ece4a8dc\"), class = \"mvp\") print(M,order=\"lex\", varorder=c(\"stoat\",\"goat\",\"boat\",\"bloat\",\"gloat\",\"float\",\"stoatboat\")) #> mvp object algebraically equal to #> 3 stoat goat^6 - 9 goat boat gloat^6 float + 7 bloat stoatboat^3 - 4"},{"path":"https://robinhankin.github.io/mvp/articles/mvp.html","id":"arithmetic-operations","dir":"Articles","previous_headings":"The STL map class","what":"Arithmetic operations","title":"The `mvp` package: fast multivariate polynomials in R","text":"arithmetic operations *, +, - ^ work expected:","code":"(S1 <- rmvp(5,2,2,4)) #> mvp object algebraically equal to #> 12 + 9 b d (S2 <- rmvp(5,2,2,4)) #> mvp object algebraically equal to #> 1 + 2 a + b d + 3 c + c d S1 + S2 #> mvp object algebraically equal to #> 13 + 2 a + 10 b d + 3 c + c d S1 * S2 #> mvp object algebraically equal to #> 12 + 24 a + 18 a b d + 27 b c d + 9 b c d^2 + 21 b d + 9 b^2 d^2 + 36 c + 12 c #> d S1^2 #> mvp object algebraically equal to #> 144 + 216 b d + 81 b^2 d^2"},{"path":"https://robinhankin.github.io/mvp/articles/mvp.html","id":"substitution","dir":"Articles","previous_headings":"The STL map class","what":"Substitution","title":"The `mvp` package: fast multivariate polynomials in R","text":"package two substitution functionalities. Firstly, can substitute one variables numeric value. Define mvp object: may substitute x=1x=1: Note natural R idiom, return value another mvp object. may substitute variables: (case, default behaviour return resulting polynomial coerced scalar). can suppress coercion using drop (formerly lose) argument: idiom also allows one substitute variable mvp object: Note carefully subs() depends order substitution:","code":"(S3 <- as.mvp(\"x + 5 x^4 y + 8 y^2 x z^3\")) #> mvp object algebraically equal to #> x + 8 x y^2 z^3 + 5 x^4 y subs(S3, x = 1) #> mvp object algebraically equal to #> 1 + 5 y + 8 y^2 z^3 subs(S3, x = 1, y = 2, z = 3) #> [1] 875 subs(S3, x = 1, y = 2, z = 3, drop=FALSE) #> mvp object algebraically equal to #> 875 subs(as.mvp(\"a+b+c\"), a=\"x^6\") #> mvp object algebraically equal to #> b + c + x^6 subs(as.mvp(\"a+b+c\"), a=\"x^6\",x=\"1+a\") #> mvp object algebraically equal to #> 1 + 6 a + 15 a^2 + 20 a^3 + 15 a^4 + 6 a^5 + a^6 + b + c subs(as.mvp(\"a+b+c\"), x=\"1+a\",a=\"x^6\") #> mvp object algebraically equal to #> b + c + x^6"},{"path":"https://robinhankin.github.io/mvp/articles/mvp.html","id":"pipes","dir":"Articles","previous_headings":"The STL map class > Substitution","what":"Pipes","title":"The `mvp` package: fast multivariate polynomials in R","text":"Substitution works well pipes:","code":"as.mvp(\"a+b\") %>% subs(a=\"a^2+b^2\") %>% subs(b=\"x^6\") #> mvp object algebraically equal to #> a^2 + x^6 + x^12"},{"path":"https://robinhankin.github.io/mvp/articles/mvp.html","id":"vectorised-substitution","dir":"Articles","previous_headings":"The STL map class","what":"Vectorised substitution","title":"The `mvp` package: fast multivariate polynomials in R","text":"Function subvec() allows one substitute variables numeric values using vectorised idiom:","code":"p <- rmvp(6,2,2,letters[1:3]) p #> mvp object algebraically equal to #> 1 + 6 a^2 + 3 b + 2 b c + 2 c subvec(p,a=1,b=2,c=1:5)   # supply a named list of vectors #> [1] 19 25 31 37 43"},{"path":"https://robinhankin.github.io/mvp/articles/mvp.html","id":"differentiation","dir":"Articles","previous_headings":"The STL map class","what":"Differentiation","title":"The `mvp` package: fast multivariate polynomials in R","text":"Differentiation implemented. First deriv() method: Also slightly different form: aderiv(), used evaluate ∂6S∂a3∂b∂c2\\frac{\\partial^6S}{\\partial ^3\\partial b\\partial c^2}: , pipes work quite nicely:","code":"(S <- as.mvp(\"a + 5 a^5*b^2*c^8 -3 x^2 a^3 b c^3\")) #> mvp object algebraically equal to #> a - 3 a^3 b c^3 x^2 + 5 a^5 b^2 c^8 deriv(S, letters[1:3]) #> mvp object algebraically equal to #> -27 a^2 c^2 x^2 + 400 a^4 b c^7 deriv(S, rev(letters[1:3]))  # should be the same. #> mvp object algebraically equal to #> -27 a^2 c^2 x^2 + 400 a^4 b c^7 aderiv(S, a = 3, b = 1, c = 2) #> mvp object algebraically equal to #> 33600 a^2 b c^6 - 108 c x^2 S %<>% aderiv(a=1,b=2) %>% subs(c=\"x^4\") %>% `+`(as.mvp(\"o^99\")) S #> mvp object algebraically equal to #> 50 a^4 x^32 + o^99"},{"path":"https://robinhankin.github.io/mvp/articles/mvp.html","id":"taylor-series","dir":"Articles","previous_headings":"The STL map class","what":"Taylor series","title":"The `mvp` package: fast multivariate polynomials in R","text":"package includes functionality deal Taylor Laurent series: Function series() decompose mvp object power series single variable: works nicely subs() wish take power series x-v, v mvp object. example: series powers x--b. may perform consistency check second substitution, returning us original expression: function series() given variable name ending _m_foo, foo variable name, typeset (x-foo). example: see expansion x3+axx^3+ax powers x−ax-. want see expansion mvp terms complicated expression better use nonce variable v: understood v=+b2v=+b^2. Function taylor() convenience wrapper one step: ’s good expected frankly ’s overkill.","code":"(X <- as.mvp(\"1+x+x^2 y\")^3) #> mvp object algebraically equal to #> 1 + 3 x + 3 x^2 + 3 x^2 y + x^3 + 6 x^3 y + 3 x^4 y + 3 x^4 y^2 + 3 x^5 y^2 + #> x^6 y^3 trunc(X,3)         # truncate, retain only terms with total power <= 3 #> mvp object algebraically equal to #> 1 + 3 x + 3 x^2 + 3 x^2 y + x^3 trunc1(X,x=3)    # truncate, retain only terms with  power of x <= 3 #> mvp object algebraically equal to #> 1 + 3 x + 3 x^2 + 3 x^2 y + x^3 + 6 x^3 y onevarpow(X,x=3) # retain only terms with power of x == 3 #> mvp object algebraically equal to #> 1 + 6 y ## second order taylor expansion of f(x)=sin(x+y) for x=1.1, about x=1: sinxpy <- horner(\"x+y\",c(0,1,0,-1/6,0,+1/120,0,-1/5040))  # sin(x+y) dx <- as.mvp(\"dx\") t2 <- sinxpy  + aderiv(sinxpy,x=1)*dx + aderiv(sinxpy,x=2)*dx^2/2 (t2 %<>% subs(x=1,dx=0.1))  # (Taylor expansion of sin(y+1.1), left in symbolic form) #> mvp object algebraically equal to #> 0.8912877 + 0.4534028 y - 0.4458333 y^2 - 0.07597222 y^3 + 0.03659722 y^4 + #> 0.003291667 y^5 - 0.001527778 y^6 - 0.0001984127 y^7 (t2 %>% subs(y=0.3))  - sin(1.4)  # numeric; should be small #> [1] -1.416914e-05 p <- as.mvp(\"a^2 x b + x^2 a b + b c x^2 + a b c + c^6 x\") p #> mvp object algebraically equal to #> a b c + a b x^2 + a^2 b x + b c x^2 + c^6 x series(p,'x') #> x^0(a b c )  + x^1(a^2 b  +  c^6 )  + x^2(a b  +  b c ) p %>% subs(x=\"xmv+a+b\") %>% series(\"xmv\")  #> xmv^0(a b c  +  2 a b^2 c  +  a b^3  +  a c^6  +  a^2 b c  +  3 a^2 b^2  +  2  #> a^3 b  +  b c^6  +  b^3 c )  + xmv^1(2 a b c  +  2 a b^2  +  3 a^2 b  +  2 b^2  #> c  +  c^6 )  + xmv^2(a b  +  b c ) p == p %>% subs(x=\"xmv+a+b\") %>% subs(xmv=\"x-a-b\") #> [1] TRUE as.mvp('x^3 + x*a') %>% subs(x=\"x_m_a + a\") %>% series(\"x_m_a\") #> (x-a)^0(a^2  +  a^3 )  + (x-a)^1(a  +  3 a^2 )  + (x-a)^2(3 a )  + (x-a)^3(1) as.mvp('x^2 + x*a + b^3') %>% subs(x=\"x_m_v + a^2+b\") %>% series(\"x_m_v\") #> (x-v)^0(a b  +  2 a^2 b  +  a^3  +  a^4  +  b^2  +  b^3 )  + (x-v)^1(a  +  2  #> a^2  +  2 b )  + (x-v)^2(1) p <- as.mvp(\"1+x-x*y+a\")^2 taylor(p,'x','a') #> (x-a)^0(1  +  4 a  -  2 a y  +  4 a^2  -  4 a^2 y  +  a^2 y^2 )  + (x-a)^1(2  +  #>  4 a  -  6 a y  +  2 a y^2  -  2 y )  + (x-a)^2(1  -  2 y  +  y^2 )"},{"path":"https://robinhankin.github.io/mvp/articles/mvp.html","id":"extraction","dir":"Articles","previous_headings":"The STL map class","what":"Extraction","title":"The `mvp` package: fast multivariate polynomials in R","text":"Given multivariate polynomial, one often needs extract certain terms. terms mvp object implementation-dependent order, can difficult. can use function onevarpow():","code":"P <- as.mvp(\"1 + z + y^2 + x*z^2 +  x*y\")^4 onevarpow(P,x=1,y=2) #> mvp object algebraically equal to #> 12 z^2 + 24 z^3 + 12 z^4"},{"path":"https://robinhankin.github.io/mvp/articles/mvp.html","id":"negative-powers","dir":"Articles","previous_headings":"The STL map class","what":"Negative powers","title":"The `mvp` package: fast multivariate polynomials in R","text":"mvp package handles negative powers, although idiom perfect ’m still working . invert() function: , p regular multivariate polynomial includes negative powers. obeys arithmetic rules mvp objects:","code":"(p <- as.mvp(\"1+x+x^2 y\")) #> mvp object algebraically equal to #> 1 + x + x^2 y invert(p) #> mvp object algebraically equal to #> 1 + x^-2 y^-1 + x^-1 p + as.mvp(\"z^6\") #> mvp object algebraically equal to #> 1 + x + x^2 y + z^6"},{"path":"https://robinhankin.github.io/mvp/articles/mvp.html","id":"the-disordr-package","dir":"Articles","previous_headings":"","what":"The disordR package","title":"The `mvp` package: fast multivariate polynomials in R","text":"possible examine coefficients mvp object: , note result coeffs() disord object, defined disordR package (Hankin 2022a). order elements unspecified STL map class holds keys values implementation-specific order. device stops user illegal operations coefficients. example, suppose another mvp object, b: , get error coefficients b possibly stored different order therefore vector addition makes sense. However, can operate coefficients single mvp object : Extraction also works subject standard disordR idiom restrictions: “mixing” objects forbidden: Extraction methods work, subject disordR restrictions: cases like replacement object complicated, using magrittr simplify idiom reduce opportunity error: One good use “zap” small elements: can zap follows: (write method zapsmall() )","code":"a <- as.mvp(\"5 + 8*x^2*y - 13*y*x^2 + 11*z - 3*x*yz\") a #> mvp object algebraically equal to #> 5 - 3 x yz - 5 x^2 y + 11 z coeffs(a) #> A disord object with hash b0695ec1b46bb6da92f016f17e49971e1036d786 and elements #> [1]  5 -3 -5 11 #> (in some order) b <- a*2 b #> mvp object algebraically equal to #> 10 - 6 x yz - 10 x^2 y + 22 z coeffs(a) + coeffs(b) #> coeffs(a) + coeffs(b) #> Error in check_matching_hash(e1, e2, match.call()):  #> hash codes b0695ec1b46bb6da92f016f17e49971e1036d786 and 286de701fbfc3887e4489c2b07127f0811071f43 do not match coeffs(a) > 0 #> A disord object with hash b0695ec1b46bb6da92f016f17e49971e1036d786 and elements #> [1]  TRUE FALSE FALSE  TRUE #> (in some order) coeffs(a) + coeffs(a)^4 #> A disord object with hash b0695ec1b46bb6da92f016f17e49971e1036d786 and elements #> [1]   630    78   620 14652 #> (in some order) coeffs(a)[coeffs(a) > 0] #> A disord object with hash 54f03094a678b0e4328942e555e5a308c29f40fe and elements #> [1]  5 11 #> (in some order) coeffs(a)[coeffs(b) > 0] #> .local(x = x, i = i, j = j, drop = drop) #> Error in check_matching_hash(x, i, match.call()):  #> hash codes b0695ec1b46bb6da92f016f17e49971e1036d786 and 286de701fbfc3887e4489c2b07127f0811071f43 do not match coeffs(a)[coeffs(a)<0] <- coeffs(a)[coeffs(a)<0] + 1000 # add 1000 to every negative coefficient a #> mvp object algebraically equal to #> 5 + 997 x yz + 995 x^2 y + 11 z coeffs(b)[coeffs(b)%%3==1] %<>% `+`(100)  # add 100 to every element equal to 1 modulo 3 b #> mvp object algebraically equal to #> 110 - 6 x yz - 10 x^2 y + 122 z x <- as.mvp(\"1 - 0.11*x + 0.005*x*y\")^2 x #> mvp object algebraically equal to #> 1 - 0.22 x + 0.01 x y + 0.0121 x^2 - 0.0011 x^2 y + 0.000025 x^2 y^2 cx <- coeffs(x) cx[abs(cx) < 0.01] <- 0 coeffs(x) <- cx x #> mvp object algebraically equal to #> 1 - 0.22 x + 0.01 x y + 0.0121 x^2"},{"path":"https://robinhankin.github.io/mvp/articles/mvp.html","id":"multivariate-generating-functions","dir":"Articles","previous_headings":"","what":"Multivariate generating functions","title":"The `mvp` package: fast multivariate polynomials in R","text":"can see generating function chess knight: many ways 4D knight return starting square four moves? Answer:","code":"knight(2) #> mvp object algebraically equal to #> a^-2 b^-1 + a^-2 b + a^-1 b^-2 + a^-1 b^2 + a b^-2 + a b^2 + a^2 b^-1 + a^2 b constant(knight(4)^4) #> [1] 12528"},{"path":[]},{"path":"https://robinhankin.github.io/mvp/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Robin K. S. Hankin. Author, maintainer.","code":""},{"path":"https://robinhankin.github.io/mvp/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hankin RK (????). mvp: Fast Symbolic Multivariate Polynomials. R package version 1.1-1, https://github.com/RobinHankin/mvp. Hankin RKS (2022). “Fast multivariate polynomials R: mvp package.” doi:10.48550/ARXIV.2210.15991.","code":"@Manual{,   title = {mvp: Fast Symbolic Multivariate Polynomials},   author = {Robin K. S. Hankin},   note = {R package version 1.1-1},   url = {https://github.com/RobinHankin/mvp}, } @Misc{,   title = {Fast multivariate polynomials in R: the mvp package},   author = {Robin K. S. Hankin},   year = {2022},   publisher = {arXiv},   doi = {10.48550/ARXIV.2210.15991}, }"},{"path":[]},{"path":"https://robinhankin.github.io/mvp/index.html","id":"overview-","dir":"","previous_headings":"","what":"Overview","title":"Fast Symbolic Multivariate Polynomials","text":"Multivariate polynomials interesting useful objects. present mvp package hopefully improves upon previous R functionality provided packages multipol, mpoly, spray. mvp package follows mpoly using symbolic, rather numeric, representation multivariate polynomial; offers speed advantages mpoly. mvp uses excellent print coercion methods mpoly package. mvp includes pleasing substitution idiom found elsewhere; theoretically comparable speed spray package present timings package vignette. mvp package uses C++’s STL map class efficiency, downside order terms, order symbols within term, undefined. matter mathematical value multivariate polynomial unaffected reordering; print method (taken mpoly) good job producing human-readable output.","code":""},{"path":"https://robinhankin.github.io/mvp/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fast Symbolic Multivariate Polynomials","text":"can install released version mvp CRAN :","code":"# install.packages(\"mvp\")  # uncomment this to install the package library(\"mvp\")"},{"path":"https://robinhankin.github.io/mvp/index.html","id":"the-mvp-package-in-use","dir":"","previous_headings":"","what":"The mvp package in use","title":"Fast Symbolic Multivariate Polynomials","text":"Creating multivariate polynomial straightforward: arithmetic operations work expected: Substitution uses subs() function:","code":"X <- as.mvp(\"1 + a^2 + a*b*c^3\") X #> mvp object algebraically equal to #> 1 + a b c^3 + a^2 Y <- as.mvp(\"12*a^2  + b - c^2 + 4*d\") X+Y #> mvp object algebraically equal to #> 1 + a b c^3 + 13 a^2 + b - c^2 + 4 d X-3*Y #> mvp object algebraically equal to #> 1 + a b c^3 - 35 a^2 - 3 b + 3 c^2 - 12 d X^2 #> mvp object algebraically equal to #> 1 + 2 a b c^3 + 2 a^2 + a^2 b^2 c^6 + 2 a^3 b c^3 + a^4 X #> mvp object algebraically equal to #> 1 + a b c^3 + a^2 subs(X,a=1) #> mvp object algebraically equal to #> 2 + b c^3 subs(X,a=1,b=2) #> mvp object algebraically equal to #> 2 + 2 c^3 subs(X,a=1,b=2,c=3) #> [1] 56 subs(X+Y,a=\"1+x^2\",b=\"x+y\",c=0) #> mvp object algebraically equal to #> 14 + 4 d + x + 26 x^2 + 13 x^4 + y"},{"path":"https://robinhankin.github.io/mvp/index.html","id":"further-information","dir":"","previous_headings":"","what":"Further information","title":"Fast Symbolic Multivariate Polynomials","text":"detail, see package vignette vignette(\"mvp\")","code":""},{"path":"https://robinhankin.github.io/mvp/reference/Ops.mvp.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic Ops Group Methods for mvp objects — Ops.mvp","title":"Arithmetic Ops Group Methods for mvp objects — Ops.mvp","text":"Allows arithmetic operators used   multivariate polynomials  addition, multiplication,   integer powers, etc.","code":""},{"path":"https://robinhankin.github.io/mvp/reference/Ops.mvp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic Ops Group Methods for mvp objects — Ops.mvp","text":"","code":"# S3 method for class 'mvp' Ops(e1, e2) mvp_negative(S) mvp_times_mvp(S1,S2) mvp_times_scalar(S,x) mvp_plus_mvp(S1,S2) mvp_plus_numeric(S,x) mvp_eq_mvp(S1,S2) mvp_modulo(S1,S2)"},{"path":"https://robinhankin.github.io/mvp/reference/Ops.mvp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arithmetic Ops Group Methods for mvp objects — Ops.mvp","text":"e1,e2,S,S1,S2 Objects class mvp x Scalar, length one numeric vector","code":""},{"path":"https://robinhankin.github.io/mvp/reference/Ops.mvp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Arithmetic Ops Group Methods for mvp objects — Ops.mvp","text":"function Ops.mvp() passes unary binary arithmetic   operators “+”, “-”, “*”   “^” appropriate specialist function. interesting operator “*”, passed   mvp_times_mvp().  guess “+” quite   interesting . caret “^” denotes arithmetic exponentiation,   x^3==x*x*x.  experimental feature, (sort )   vectorised: n vector, ^n returns sum   raised power element n.  example,   ^c(n1,n2,n3) ^n1 + ^n2 + ^n3.  Internally,   n tabulated interests efficiency,   ^c(0,2,5,5,5) = 1 + ^2 + 3a^5 evaluated   single fifth power.  Similar functionality implemented   freealg package.","code":""},{"path":"https://robinhankin.github.io/mvp/reference/Ops.mvp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arithmetic Ops Group Methods for mvp objects — Ops.mvp","text":"high-level functions documented return object   mvp, low-level functions documented lowlevel.Rd   return lists.   use low-level functions.","code":""},{"path":"https://robinhankin.github.io/mvp/reference/Ops.mvp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Arithmetic Ops Group Methods for mvp objects — Ops.mvp","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/mvp/reference/Ops.mvp.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Arithmetic Ops Group Methods for mvp objects — Ops.mvp","text":"Function mvp_modulo() distinctly sub-optimal inst/mvp_modulo.Rmd details ideas better implementation.","code":""},{"path":[]},{"path":"https://robinhankin.github.io/mvp/reference/Ops.mvp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arithmetic Ops Group Methods for mvp objects — Ops.mvp","text":"","code":"(p1 <- rmvp(3)) #> mvp object algebraically equal to #> 2 a^2 b c^2 + 3 a^2 d e + b^2 e f (p2 <- rmvp(3)) #> mvp object algebraically equal to #> 3 + 3 a d e + 2 f  p1*p2 #> mvp object algebraically equal to #> 3 a b^2 d e^2 f + 6 a^2 b c^2 + 4 a^2 b c^2 f + 9 a^2 d e + 6 a^2 d e f + 6 a^3 #> b c^2 d e + 9 a^3 d^2 e^2 + 3 b^2 e f + 2 b^2 e f^2  p1+p2 #> mvp object algebraically equal to #> 3 + 3 a d e + 2 a^2 b c^2 + 3 a^2 d e + b^2 e f + 2 f  p1^3 #> mvp object algebraically equal to #> 9 a^2 b^4 d e^3 f^2 + 6 a^2 b^5 c^2 e^2 f^2 + 27 a^4 b^2 d^2 e^3 f + 36 a^4 b^3 #> c^2 d e^2 f + 12 a^4 b^4 c^4 e f + 54 a^6 b c^2 d^2 e^2 + 36 a^6 b^2 c^4 d e + #> 8 a^6 b^3 c^6 + 27 a^6 d^3 e^3 + b^6 e^3 f^3   p1*(p1+p2) == p1^2+p1*p2  # should be TRUE #> [1] TRUE"},{"path":"https://robinhankin.github.io/mvp/reference/all.equal.html","id":null,"dir":"Reference","previous_headings":"","what":"Approximate equality of mvp objects — all_equal_mvp","title":"Approximate equality of mvp objects — all_equal_mvp","text":"Two multivariate polynomials \\(x,y\\) held approximately equal coefficients \\(x-y\\) small compared coefficients \\(x\\) \\(y\\) separately.  comparison .equal() dispatched all_equal_mvp() uses base::.equal().","code":""},{"path":"https://robinhankin.github.io/mvp/reference/all.equal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Approximate equality of mvp objects — all_equal_mvp","text":"","code":"all_equal_mvp(target, current)"},{"path":"https://robinhankin.github.io/mvp/reference/all.equal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Approximate equality of mvp objects — all_equal_mvp","text":"target,current Objects class mvp","code":""},{"path":"https://robinhankin.github.io/mvp/reference/all.equal.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Approximate equality of mvp objects — all_equal_mvp","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/mvp/reference/all.equal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Approximate equality of mvp objects — all_equal_mvp","text":"","code":"a <- rmvp() a1 <- a + rmvp()/1e5 a2 <- a - rmvp()/1e5 all.equal(a1,a2) #> [1] \"Mean scaled difference: 6.714267e-06\""},{"path":"https://robinhankin.github.io/mvp/reference/allvars.html","id":null,"dir":"Reference","previous_headings":"","what":"All variables in a multivariate polynomial — allvars","title":"All variables in a multivariate polynomial — allvars","text":"Returns character vector containing variables present mvp object.","code":""},{"path":"https://robinhankin.github.io/mvp/reference/allvars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"All variables in a multivariate polynomial — allvars","text":"","code":"allvars(x)"},{"path":"https://robinhankin.github.io/mvp/reference/allvars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"All variables in a multivariate polynomial — allvars","text":"x object class mvp","code":""},{"path":"https://robinhankin.github.io/mvp/reference/allvars.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"All variables in a multivariate polynomial — allvars","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/mvp/reference/allvars.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"All variables in a multivariate polynomial — allvars","text":"character vector returned particular order.  might better allvars() return disord object.","code":""},{"path":"https://robinhankin.github.io/mvp/reference/allvars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"All variables in a multivariate polynomial — allvars","text":"","code":"p <- rmvp(5) p #> mvp object algebraically equal to #> 5 + 5 c d^3 + 3 c d^3 e^2 + 2 e f + 2 f allvars(p) #> [1] \"c\" \"d\" \"e\" \"f\""},{"path":"https://robinhankin.github.io/mvp/reference/as.function.html","id":null,"dir":"Reference","previous_headings":"","what":"Functional form for multivariate polynomials — as.function.mvp","title":"Functional form for multivariate polynomials — as.function.mvp","text":"Coerces multivariate polynomial function","code":""},{"path":"https://robinhankin.github.io/mvp/reference/as.function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functional form for multivariate polynomials — as.function.mvp","text":"","code":"# S3 method for class 'mvp' as.function(x, ...)"},{"path":"https://robinhankin.github.io/mvp/reference/as.function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functional form for multivariate polynomials — as.function.mvp","text":"x Multivariate polynomial ... arguments (currently ignored)","code":""},{"path":"https://robinhankin.github.io/mvp/reference/as.function.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Functional form for multivariate polynomials — as.function.mvp","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/mvp/reference/as.function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functional form for multivariate polynomials — as.function.mvp","text":"","code":"p <- as.mvp(\"1+a^2 + a*b^2 + c\") p #> mvp object algebraically equal to #> 1 + a b^2 + a^2 + c f <- as.function(p) f #> function (...)  #> { #>     subs(x, ...) #> } #> <bytecode: 0x56319c0f2000> #> <environment: 0x56319c0f1ba0>  f(a=1) #> mvp object algebraically equal to #> 2 + b^2 + c f(a=1,b=2) #> mvp object algebraically equal to #> 6 + c f(a=1,b=2,c=3)             # coerces to a scalar #> [1] 9 f(a=1,b=2,c=3,drop=FALSE)  # formal mvp object #> mvp object algebraically equal to #> 9"},{"path":"https://robinhankin.github.io/mvp/reference/coeffs.html","id":null,"dir":"Reference","previous_headings":"","what":"Functionality for coeffs objects — coeffs","title":"Functionality for coeffs objects — coeffs","text":"Function coeffs() allows arithmetic operators used   coefficients multivariate polynomials, bearing mind   order coefficients determined.  uses disord   class disordR package. “Pure” extraction replacement ([] [] <- value) implemented experimentally.  code extraction cute particularly efficient.","code":""},{"path":"https://robinhankin.github.io/mvp/reference/coeffs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functionality for coeffs objects — coeffs","text":"","code":"coeffs(x) vars(x) powers(x) coeffs(x) <- value"},{"path":"https://robinhankin.github.io/mvp/reference/coeffs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functionality for coeffs objects — coeffs","text":"x Object class disord value Object class disord, length-1 numeric vector","code":""},{"path":"https://robinhankin.github.io/mvp/reference/coeffs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functionality for coeffs objects — coeffs","text":"(much discussion appears vignette   disordR package). Accessing elements mvp object problematic   order terms mvp object well-defined.    map class STL specify   order key-value pairs (indeed actual order   stored may implementation dependent).  situation   similar hyper2 package uses STL   similar way. coeffs object vector coefficients mvp   object.  conventional vector; conventional   vector, can identify first element unambiguously,   second, .  mvp map terms coefficients,   map intrinsic ordering: maps  map correspond multinomial (symbolically,   \\(x+3y+4xy^3=4xy^3+x+3y\\)).  Thus coefficients   multinomial might c(1,3,4) c(4,1,3), indeed   ordering.  note particular ordering imposes ordering   terms.  choose c(1,3,4) terms   x,y,xy^3, choose c(4,1,3) terms   xy^3,x,y. package, coeffs() returns object class   disord.  class object slot coefficients   form numeric R vector, also another slot uses   hash codes prevent users misusing ordering numeric   vector. example, multinomial x+2y+3z might coefficients   c(1,2,3) c(3,1,2).  Package idiom extract   coefficients multivariate polynomial   coeffs(); return standard numeric vector   numeric vector elements particular order,   coefficients multivariate polynomial stored   implementation-specific (thus unknown) order. Suppose two multivariate polynomials, defined   =x+2y+3z b=x+3y+4z.  Even though   +b well-defined algebraically, coeffs(+b)   return well-defined mvp_coeffs object, idiom   coeffs() + coeffs(b) defined   guarantee coefficients two multivariate polynomials   stored order.  might   c(1,2,3)+c(1,3,4)=c(2,5,7)   c(1,2,3)+c(1,4,3)=c(2,6,6), neither   “correct” .  package, coeffs() +   coeffs(b) return error.  way coeffs() +   1:3 defined return error.  , idiom   coeffs() <- 1:3 coeffs() <- coeffs(b)   defined return error.  However, note coeffs()   + coeffs() coeffs()+coeffs()^2 fine,   returning mvp_coeffs object specific . Idiom coeffs() <- coeffs()^2 fine , one   need know order coefficients either side,   long order sides.  translate   idiomatic English: “coefficient term   becomes square”; note operation insensitive   order coefficients.  whole shebang intended make   idiom coeffs() <- coeffs()%%2 possible (can   manipulate polynomials finite rings,   \\(\\mathbb{Z}/2\\mathbb{Z}\\)). replacement methods defined expression like   coeffs()[coeffs() > 5] <- 5 works expected; English   idiom “Replace coefficient greater 5 5”. fix ideas, consider <- rmvp(8).  Extraction presents   issues; consider coeffs()<5.  object Boolean elements   ordering ambiguity coeffs().  One might   expect use extract elements coeffs(),   specifically elements less 5.  However,   coeffs()[coeffs()<5] isolation meaningless: can   done object?  However, makes sense left hand   side assignment, long right hand side length-one   vector.  Idiom    algebraically meaningful (“Add 4 element less   5”; “coefficients become pairwise maximum   3”).  disordR package uses pmaxdis() rather   pmax() technical reasons. output coeffs(x) defined unknown   rearrangement.  considerations apply output   vars(), returns list character vectors   undefined order, output powers(), returns   numeric list whose elements undefined order.  However, even   though order three objects undefined individually,   ordering jointly consistent sense first   element coeffs(x) corresponds first element   vars(x) first element powers(x).    identity element defined—whatever ,   first element three accessor methods refers . Note also single term (something like 4a^3*b*c^6)   issue: variables stored well-defined order.   matter algebraic value term   depend order variables appear term   equivalent 4b*c^6*^3.","code":"{x -> 1, y -> 3, xy^3 -> 4} {xy^3 -> 4, x -> 1, y -> 3} coeffs(a)[coeffs(a)<5] <- 4+coeffs(a)[coeffs(a)<5] coeffs(a) <- pmax(a,3)"},{"path":"https://robinhankin.github.io/mvp/reference/coeffs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Functionality for coeffs objects — coeffs","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/mvp/reference/coeffs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functionality for coeffs objects — coeffs","text":"","code":"(x <- 5+rmvp(6)) #> mvp object algebraically equal to #> 5 + 2 a c^2 f + 5 b + 5 b c d + 6 b d + 6 c e f^2 + 5 e^3 (y <- 2+rmvp(6)) #> mvp object algebraically equal to #> 2 + 6 a b + 4 a^3 c f^2 + 2 b + 3 c + 5 c d^2 e^2 + 4 d  coeffs(x)^2 #> A disord object with hash 654c2c4102acef68a89664a25b0ac4aad030bc93 and elements #> [1] 25  4 25 25 36 36 25 #> (in some order) coeffs(y) <- coeffs(y)%%3  # fine, all coeffs of y now modulo 3 y #> mvp object algebraically equal to #> 2 + a^3 c f^2 + 2 b + 2 c d^2 e^2 + d  coeffs(y) <- 4                y #> mvp object algebraically equal to #> 4 + 4 a^3 c f^2 + 4 b + 4 c d^2 e^2 + 4 d  if (FALSE) { # \\dontrun{ coeffs(x) <- coeffs(y)          # not defined, will give an error coeffs(x) <- seq_len(nterms(x)) # not defined, will give an error } # }"},{"path":"https://robinhankin.github.io/mvp/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"The constant term — constant","title":"The constant term — constant","text":"Get set constant term mvp object","code":""},{"path":"https://robinhankin.github.io/mvp/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The constant term — constant","text":"","code":"# S3 method for class 'mvp' constant(x) # S3 method for class 'mvp' constant(x) <- value # S3 method for class 'numeric' constant(x) is.constant(x)"},{"path":"https://robinhankin.github.io/mvp/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The constant term — constant","text":"x Object class mvp value Scalar value constant","code":""},{"path":"https://robinhankin.github.io/mvp/reference/constant.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The constant term — constant","text":"constant term polynomial coefficient empty term.   mvp object, map {} -> c, implies c   constant. x mvp object, constant(x) returns value   constant multivariate polynomial; x numeric,   returns constant multivariate polynomial value x. Function .constant() returns TRUE argument   variables FALSE otherwise.","code":""},{"path":"https://robinhankin.github.io/mvp/reference/constant.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The constant term — constant","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/mvp/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The constant term — constant","text":"","code":"a <- rmvp(5)+4 a #> mvp object algebraically equal to #> 6 + 5 b c e f^2 + 5 c^2 e + 5 d e f + 5 e^2 constant(a) #> [1] 6 constant(a) <- 33 a #> mvp object algebraically equal to #> 33 + 5 b c e f^2 + 5 c^2 e + 5 d e f + 5 e^2  constant(0)  # the zero mvp #> mvp object algebraically equal to #> 0"},{"path":"https://robinhankin.github.io/mvp/reference/deriv.html","id":null,"dir":"Reference","previous_headings":"","what":"Differentiation of mvp objects — deriv","title":"Differentiation of mvp objects — deriv","text":"Differentiation mvp objects","code":""},{"path":"https://robinhankin.github.io/mvp/reference/deriv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differentiation of mvp objects — deriv","text":"","code":"# S3 method for class 'mvp' deriv(expr, v, ...) # S3 method for class 'mvp' aderiv(expr, ...)"},{"path":"https://robinhankin.github.io/mvp/reference/deriv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differentiation of mvp objects — deriv","text":"expr Object class mvp v Character vector.  Elements denote variables differentiate     respect ... arguments.  deriv(), non-negative     integer argument specifies order differential,     aderiv() argument names specify differentials     values respective orders","code":""},{"path":"https://robinhankin.github.io/mvp/reference/deriv.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Differentiation of mvp objects — deriv","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/mvp/reference/deriv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differentiation of mvp objects — deriv","text":"deriv(S,v) returns \\(\\frac{\\partial^r S}{\\partial   v_1\\partial v_2\\ldots\\partial v_r}\\).  , v   (character) vector symbols. deriv(S,v,n) returns n-th derivative S   respect symbol v, \\(\\frac{\\partial^n S}{\\partial   v^n}\\). aderiv() uses ellipsis construction names   argument variable differentiated respect .   Thus aderiv(S,x=1,y=2) returns \\(\\frac{\\partial^3   S}{\\partial x\\partial y^2}\\).","code":""},{"path":"https://robinhankin.github.io/mvp/reference/deriv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differentiation of mvp objects — deriv","text":"","code":"(p <- rmvp(10,4,15,5)) #> mvp object algebraically equal to #> 12 + 7 a b^3 c^4 e + 9 a b^3 d^2 e^2 + 8 a^4 b^4 d^3 e + 10 a^4 b^4 e + 3 a^5 #> b^4 c d^3 + 10 b c^2 + 10 b^3 c^2 + 4 b^5 c^5 d^2 deriv(p,\"a\") #> mvp object algebraically equal to #> 32 a^3 b^4 d^3 e + 40 a^3 b^4 e + 15 a^4 b^4 c d^3 + 7 b^3 c^4 e + 9 b^3 d^2 #> e^2 deriv(p,\"a\",3) #> mvp object algebraically equal to #> 192 a b^4 d^3 e + 240 a b^4 e + 180 a^2 b^4 c d^3 deriv(p,letters[1:3]) #> mvp object algebraically equal to #> 60 a^4 b^3 d^3 + 84 b^2 c^3 e deriv(p,rev(letters[1:3]))  # should be the same #> mvp object algebraically equal to #> 60 a^4 b^3 d^3 + 84 b^2 c^3 e  aderiv(p,a=1,b=2,c=1) #> mvp object algebraically equal to #> 180 a^4 b^2 d^3 + 168 b c^3 e  ## verify the chain rule: x <- rmvp(7,symbols=6) v <- allvars(x)[1] s <- as.mvp(\"1  +  y  -  y^2 zz  +  y^3 z^2\") LHS <- subsmvp(deriv(x,v)*deriv(s,\"y\"),v,s)   # dx/ds*ds/dy RHS <- deriv(subsmvp(x,v,s),\"y\")              # dx/dy  LHS - RHS # should be zero #> mvp object algebraically equal to #> 0"},{"path":"https://robinhankin.github.io/mvp/reference/drop.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop empty variables — drop","title":"Drop empty variables — drop","text":"Convert mvp object pure constant scalar whose value coefficient empty term. functions package (currently subs(), subsy()) take drop argument behaves much like drop argument base extraction. Function drop() S4 generic, package calls setOldClass(). Function drop() formerly called lose().","code":""},{"path":"https://robinhankin.github.io/mvp/reference/drop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop empty variables — drop","text":"","code":"# S4 method for class 'mvp' drop(x)"},{"path":"https://robinhankin.github.io/mvp/reference/drop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop empty variables — drop","text":"x Object class mvp","code":""},{"path":"https://robinhankin.github.io/mvp/reference/drop.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Drop empty variables — drop","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/mvp/reference/drop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop empty variables — drop","text":"","code":"(m1 <- as.mvp(\"1+bish +bash^2 + bosh^3\")) #> mvp object algebraically equal to #> 1 + bash^2 + bish + bosh^3 (m2 <- as.mvp(\"bish +bash^2 + bosh^3\")) #> mvp object algebraically equal to #> bash^2 + bish + bosh^3  m1-m2         # an mvp object #> mvp object algebraically equal to #> 1 drop(m1-m2)   # numeric #> [1] 1"},{"path":"https://robinhankin.github.io/mvp/reference/horner.html","id":null,"dir":"Reference","previous_headings":"","what":"Horner's method — horner","title":"Horner's method — horner","text":"Horner's method multivariate polynomials","code":""},{"path":"https://robinhankin.github.io/mvp/reference/horner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Horner's method — horner","text":"","code":"horner(P,v)"},{"path":"https://robinhankin.github.io/mvp/reference/horner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Horner's method — horner","text":"P Multivariate polynomial v Numeric vector coefficients","code":""},{"path":"https://robinhankin.github.io/mvp/reference/horner.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Horner's method — horner","text":"Given polynomial $$p(x) = a_0 +a_1+a_2x^2+\\cdots + a_nx^n$$ possible express \\(p(x)\\) algebraically equivalent   form $$p(x) = a_0 + x\\left(a_1+x\\left(a_2+\\cdots + x\\left(a_{n-1} +xa_n \\right)\\cdots\\right)\\right)$$ much efficient evaluation, requires \\(n\\) multiplications \\(n\\) additions, optimal.  implemented efficient.  implemented works \\(x\\) (multivariate) polynomial, second coolest thing ever.  coolest thing ever Reduce() function.","code":""},{"path":"https://robinhankin.github.io/mvp/reference/horner.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Horner's method — horner","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/mvp/reference/horner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Horner's method — horner","text":"","code":"horner(\"x\",1:5) #> mvp object algebraically equal to #> 1 + 2 x + 3 x^2 + 4 x^3 + 5 x^4 horner(\"x+y\",1:3) #> mvp object algebraically equal to #> 1 + 2 x + 6 x y + 3 x^2 + 2 y + 3 y^2  w <- as.mvp(\"x+y^2\") stopifnot(1 + 2*w + 3*w^2 == horner(w,1:3))  # note off-by-one issue  \"x+y+x*y\" |> horner(1:3) |> horner(1:2) #> mvp object algebraically equal to #> 3 + 4 x + 16 x y + 12 x y^2 + 6 x^2 + 12 x^2 y + 6 x^2 y^2 + 4 y + 6 y^2"},{"path":"https://robinhankin.github.io/mvp/reference/invert.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace symbols with their reciprocals — invert","title":"Replace symbols with their reciprocals — invert","text":"Given mvp object, replace one symbols reciprocals","code":""},{"path":"https://robinhankin.github.io/mvp/reference/invert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace symbols with their reciprocals — invert","text":"","code":"invert(p, v)"},{"path":"https://robinhankin.github.io/mvp/reference/invert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace symbols with their reciprocals — invert","text":"p Object (coerced ) mvp form v Character vector symbols replaced     reciprocal; missing interpreted replace symbols","code":""},{"path":"https://robinhankin.github.io/mvp/reference/invert.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Replace symbols with their reciprocals — invert","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/mvp/reference/invert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace symbols with their reciprocals — invert","text":"","code":"invert(\"x\") #> mvp object algebraically equal to #> x^-1  (P <- as.mvp(\"1+a+6*a^2 -7*a*b\")) #> mvp object algebraically equal to #> 1 + a - 7 a b + 6 a^2 invert(P,\"a\") #> mvp object algebraically equal to #> 1 + 6 a^-2 + a^-1 - 7 a^-1 b"},{"path":"https://robinhankin.github.io/mvp/reference/kahle.html","id":null,"dir":"Reference","previous_headings":"","what":"A sparse multivariate polynomial — kahle","title":"A sparse multivariate polynomial — kahle","text":"sparse multivariate polynomial inspired Kahle (2013)","code":""},{"path":"https://robinhankin.github.io/mvp/reference/kahle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A sparse multivariate polynomial — kahle","text":"","code":"kahle(n = 26, r = 1, p = 1, coeffs = 1, symbols = letters)"},{"path":"https://robinhankin.github.io/mvp/reference/kahle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A sparse multivariate polynomial — kahle","text":"n Number different symbols use r Number symbols single term p Power symbol terms coeffs Coefficients terms symbols Alphabet symbols","code":""},{"path":"https://robinhankin.github.io/mvp/reference/kahle.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A sparse multivariate polynomial — kahle","text":"David Kahle 2013.  “mpoly: multivariate polynomials R”. R Journal, volume 5/1.","code":""},{"path":"https://robinhankin.github.io/mvp/reference/kahle.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A sparse multivariate polynomial — kahle","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/mvp/reference/kahle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A sparse multivariate polynomial — kahle","text":"","code":"kahle()  # a+b+...+z #> mvp object algebraically equal to #> a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + #> u + v + w + x + y + z kahle(r=2,p=1:2)  # Kahle's original example #> mvp object algebraically equal to #> a z^2 + a^2 b + b^2 c + c^2 d + d^2 e + e^2 f + f^2 g + g^2 h + h^2 i + i^2 j + #> j^2 k + k^2 l + l^2 m + m^2 n + n^2 o + o^2 p + p^2 q + q^2 r + r^2 s + s^2 t + #> t^2 u + u^2 v + v^2 w + w^2 x + x^2 y + y^2 z  ## example where mvp runs faster than spray (mvp does not need a 200x200 matrix): k <- kahle(200,r=3,p=1:3,symbols=paste(\"x\",sprintf(\"%02d\",1:200),sep=\"\")) system.time(ignore <- k^2) #>    user  system elapsed  #>   1.301   0.011   1.312  #system.time(ignore <- mvp_to_spray(k)^2)   # needs spray package loaded"},{"path":"https://robinhankin.github.io/mvp/reference/knight.html","id":null,"dir":"Reference","previous_headings":"","what":"Chess knight — knight","title":"Chess knight — knight","text":"Generating function chess knight infinite   \\(d\\)-dimensional chessboard","code":""},{"path":"https://robinhankin.github.io/mvp/reference/knight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chess knight — knight","text":"","code":"knight(d, can_stay_still = FALSE)"},{"path":"https://robinhankin.github.io/mvp/reference/knight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chess knight — knight","text":"d Dimension board can_stay_still Boolean, default FALSE meaning     knight obliged move FALSE meaning     option remaining square","code":""},{"path":"https://robinhankin.github.io/mvp/reference/knight.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Chess knight — knight","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/mvp/reference/knight.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Chess knight — knight","text":"function slight modification spray::knight().","code":""},{"path":"https://robinhankin.github.io/mvp/reference/knight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chess knight — knight","text":"","code":"knight(2)      # regular chess knight on a regular chess board #> mvp object algebraically equal to #> a^-2 b^-1 + a^-2 b + a^-1 b^-2 + a^-1 b^2 + a b^-2 + a b^2 + a^2 b^-1 + a^2 b knight(2,TRUE) # regular chess knight that can stay still #> mvp object algebraically equal to #> 1 + a^-2 b^-1 + a^-2 b + a^-1 b^-2 + a^-1 b^2 + a b^-2 + a b^2 + a^2 b^-1 + a^2 #> b  # Q: how many ways are there for a 4D knight to return to its starting # square after four moves?  # A: constant(knight(4)^4) #> [1] 12528  # Q ...and how many ways in four moves or fewer?  # A1: constant(knight(4,TRUE)^4) #> [1] 12817  # A2: constant((1+knight(4))^4) #> [1] 12817"},{"path":"https://robinhankin.github.io/mvp/reference/letters.html","id":null,"dir":"Reference","previous_headings":"","what":"Single-letter symbols — letters","title":"Single-letter symbols — letters","text":"Variables , b,... z given mvp   semantic meaning.","code":""},{"path":"https://robinhankin.github.io/mvp/reference/letters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single-letter symbols — letters","text":"","code":"data(lettersymbols)"},{"path":"https://robinhankin.github.io/mvp/reference/letters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Single-letter symbols — letters","text":"Twenty-six variables -z defined mvp semantic   equivalent:  objects can generated running script inst/symb.Rmd,   includes discussion technical documentation   creates file lettersymbols.rda resides   data/ directory. Letters c, q, t might pose difficulties.","code":"a <- as.mvp(\"a\")     ...     z <- as.mvp(\"z\")"},{"path":"https://robinhankin.github.io/mvp/reference/letters.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Single-letter symbols — letters","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/mvp/reference/letters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Single-letter symbols — letters","text":"","code":"data(lettersymbols) (a+b)*(a-b) #> mvp object algebraically equal to #> a^2 - b^2  (x + y + z)^3 - 3*(x + y + z)*(x*y + x*z + y*z) + 3*x*y*z #> mvp object algebraically equal to #> x^3 + y^3 + z^3"},{"path":"https://robinhankin.github.io/mvp/reference/lowlevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Low level functions — lowlevel","title":"Low level functions — lowlevel","text":"Various low-level functions call C routines","code":""},{"path":"https://robinhankin.github.io/mvp/reference/lowlevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Low level functions — lowlevel","text":"","code":"mvp_substitute(allnames,allpowers,coefficients,v,values) mvp_substitute_mvp(allnames1, allpowers1, coefficients1, allnames2, allpowers2,      coefficients2, v) mvp_vectorised_substitute(allnames, allpowers, coefficients, M, nrows, ncols, v) mvp_prod(allnames1,allpowers1,coefficients1,allnames2,allpowers2,coefficients2) mvp_add(allnames1, allpowers1, coefficients1, allnames2, allpowers2,coefficients2) simplify(allnames,allpowers,coefficients) mvp_deriv(allnames, allpowers, coefficients, v) mvp_power(allnames, allpowers, coefficients, n)"},{"path":"https://robinhankin.github.io/mvp/reference/lowlevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Low level functions — lowlevel","text":"allnames,allpowers,coefficients,allnames1,allpowers1,coefficients1,     allnames2,allpowers2,coefficients2,v,values,n,M,nrows,ncols Variables     sent C routines","code":""},{"path":"https://robinhankin.github.io/mvp/reference/lowlevel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Low level functions — lowlevel","text":"functions call functions defined RcppExports.R","code":""},{"path":"https://robinhankin.github.io/mvp/reference/lowlevel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Low level functions — lowlevel","text":"Robin K. S.  Hankin","code":""},{"path":"https://robinhankin.github.io/mvp/reference/lowlevel.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Low level functions — lowlevel","text":"functions intended end-user.  Use   syntactic sugar (+b *b ^n),   functions like mvp_plus_mvp(), user-friendly.","code":""},{"path":"https://robinhankin.github.io/mvp/reference/mpoly.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion to and from mpoly form — mpoly","title":"Conversion to and from mpoly form — mpoly","text":"mpoly package David Kahle provides similar   functionality package, functions documented   convert mpoly mvp objects.  mvp package uses   mpoly::mp() convert character strings mvp objects.","code":""},{"path":"https://robinhankin.github.io/mvp/reference/mpoly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion to and from mpoly form — mpoly","text":"","code":"mpoly_to_mvp(m) # S3 method for class 'mvp' as.mpoly(x,...)"},{"path":"https://robinhankin.github.io/mvp/reference/mpoly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion to and from mpoly form — mpoly","text":"m object class mvp x object class mpoly ... arguments, currently ignored","code":""},{"path":"https://robinhankin.github.io/mvp/reference/mpoly.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Conversion to and from mpoly form — mpoly","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/mvp/reference/mpoly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conversion to and from mpoly form — mpoly","text":"","code":"x <- rmvp(5)  x == mpoly_to_mvp(mpoly::as.mpoly(x))        # should be TRUE #> [1] TRUE"},{"path":"https://robinhankin.github.io/mvp/reference/mvp-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast Symbolic Multivariate Polynomials — mvp-package","title":"Fast Symbolic Multivariate Polynomials — mvp-package","text":"Fast manipulation symbolic multivariate polynomials   using 'Map' class Standard Template Library.  package   uses print coercion methods 'mpoly' package   offers speed improvements.  comparable speed 'spray'   package sparse arrays, retains symbolic benefits   'mpoly'.  cite package publications, use Hankin 2022   <doi:10.48550/ARXIV.2210.15991>.  Uses 'disordR' discipline.","code":""},{"path":"https://robinhankin.github.io/mvp/reference/mvp-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fast Symbolic Multivariate Polynomials — mvp-package","text":"DESCRIPTION file: package yet installed build time.   Index:  package yet installed build time.","code":""},{"path":"https://robinhankin.github.io/mvp/reference/mvp-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fast Symbolic Multivariate Polynomials — mvp-package","text":"Robin K. S. Hankin [aut, cre] (ORCID:     <https://orcid.org/0000-0001-5982-0415>) Maintainer: Robin K. S. Hankin <hankin.robin@gmail.com>","code":""},{"path":"https://robinhankin.github.io/mvp/reference/mvp-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast Symbolic Multivariate Polynomials — mvp-package","text":"","code":"(p <- as.mvp(\"1+x+x*y+x^5\")) #> mvp object algebraically equal to #> 1 + x + x y + x^5  p + as.mvp(\"a+b^6\") #> mvp object algebraically equal to #> 1 + a + b^6 + x + x y + x^5  p^3 #> mvp object algebraically equal to #> 1 + 3 x + 3 x y + 3 x^2 + 6 x^2 y + 3 x^2 y^2 + x^3 + 3 x^3 y + 3 x^3 y^2 + x^3 #> y^3 + 3 x^5 + 6 x^6 + 6 x^6 y + 3 x^7 + 6 x^7 y + 3 x^7 y^2 + 3 x^10 + 3 x^11 + #> 3 x^11 y + x^15  subs(p^4,x=\"a+b^2\") #> mvp object algebraically equal to #> 1 + 4 a + 12 a b^2 + 24 a b^2 y + 12 a b^2 y^2 + 12 a b^4 + 36 a b^4 y + 36 a #> b^4 y^2 + 12 a b^4 y^3 + 4 a b^6 + 16 a b^6 y + 24 a b^6 y^2 + 16 a b^6 y^3 + 4 #> a b^6 y^4 + 20 a b^8 + 72 a b^10 + 72 a b^10 y + 84 a b^12 + 168 a b^12 y + 84 #> a b^12 y^2 + 32 a b^14 + 96 a b^14 y + 96 a b^14 y^2 + 32 a b^14 y^3 + 60 a #> b^18 + 132 a b^20 + 132 a b^20 y + 72 a b^22 + 144 a b^22 y + 72 a b^22 y^2 + #> 60 a b^28 + 64 a b^30 + 64 a b^30 y + 20 a b^38 + 4 a y + 6 a^2 + 12 a^2 b^2 + #> 36 a^2 b^2 y + 36 a^2 b^2 y^2 + 12 a^2 b^2 y^3 + 6 a^2 b^4 + 24 a^2 b^4 y + 36 #> a^2 b^4 y^2 + 24 a^2 b^4 y^3 + 6 a^2 b^4 y^4 + 40 a^2 b^6 + 180 a^2 b^8 + 180 #> a^2 b^8 y + 252 a^2 b^10 + 504 a^2 b^10 y + 252 a^2 b^10 y^2 + 112 a^2 b^12 + #> 336 a^2 b^12 y + 336 a^2 b^12 y^2 + 112 a^2 b^12 y^3 + 270 a^2 b^16 + 660 a^2 #> b^18 + 660 a^2 b^18 y + 396 a^2 b^20 + 792 a^2 b^20 y + 396 a^2 b^20 y^2 + 420 #> a^2 b^26 + 480 a^2 b^28 + 480 a^2 b^28 y + 190 a^2 b^36 + 12 a^2 y + 6 a^2 y^2 #> + 4 a^3 + 4 a^3 b^2 + 16 a^3 b^2 y + 24 a^3 b^2 y^2 + 16 a^3 b^2 y^3 + 4 a^3 #> b^2 y^4 + 40 a^3 b^4 + 240 a^3 b^6 + 240 a^3 b^6 y + 420 a^3 b^8 + 840 a^3 b^8 #> y + 420 a^3 b^8 y^2 + 224 a^3 b^10 + 672 a^3 b^10 y + 672 a^3 b^10 y^2 + 224 #> a^3 b^10 y^3 + 720 a^3 b^14 + 1980 a^3 b^16 + 1980 a^3 b^16 y + 1320 a^3 b^18 + #> 2640 a^3 b^18 y + 1320 a^3 b^18 y^2 + 1820 a^3 b^24 + 2240 a^3 b^26 + 2240 a^3 #> b^26 y + 1140 a^3 b^34 + 12 a^3 y + 12 a^3 y^2 + 4 a^3 y^3 + a^4 + 20 a^4 b^2 + #> 180 a^4 b^4 + 180 a^4 b^4 y + 420 a^4 b^6 + 840 a^4 b^6 y + 420 a^4 b^6 y^2 + #> 280 a^4 b^8 + 840 a^4 b^8 y + 840 a^4 b^8 y^2 + 280 a^4 b^8 y^3 + 1260 a^4 b^12 #> + 3960 a^4 b^14 + 3960 a^4 b^14 y + 2970 a^4 b^16 + 5940 a^4 b^16 y + 2970 a^4 #> b^16 y^2 + 5460 a^4 b^22 + 7280 a^4 b^24 + 7280 a^4 b^24 y + 4845 a^4 b^32 + 4 #> a^4 y + 6 a^4 y^2 + 4 a^4 y^3 + a^4 y^4 + 4 a^5 + 72 a^5 b^2 + 72 a^5 b^2 y + #> 252 a^5 b^4 + 504 a^5 b^4 y + 252 a^5 b^4 y^2 + 224 a^5 b^6 + 672 a^5 b^6 y + #> 672 a^5 b^6 y^2 + 224 a^5 b^6 y^3 + 1512 a^5 b^10 + 5544 a^5 b^12 + 5544 a^5 #> b^12 y + 4752 a^5 b^14 + 9504 a^5 b^14 y + 4752 a^5 b^14 y^2 + 12012 a^5 b^20 + #> 17472 a^5 b^22 + 17472 a^5 b^22 y + 15504 a^5 b^30 + 12 a^6 + 84 a^6 b^2 + 168 #> a^6 b^2 y + 84 a^6 b^2 y^2 + 112 a^6 b^4 + 336 a^6 b^4 y + 336 a^6 b^4 y^2 + #> 112 a^6 b^4 y^3 + 1260 a^6 b^8 + 5544 a^6 b^10 + 5544 a^6 b^10 y + 5544 a^6 #> b^12 + 11088 a^6 b^12 y + 5544 a^6 b^12 y^2 + 20020 a^6 b^18 + 32032 a^6 b^20 + #> 32032 a^6 b^20 y + 38760 a^6 b^28 + 12 a^6 y + 12 a^7 + 32 a^7 b^2 + 96 a^7 b^2 #> y + 96 a^7 b^2 y^2 + 32 a^7 b^2 y^3 + 720 a^7 b^6 + 3960 a^7 b^8 + 3960 a^7 b^8 #> y + 4752 a^7 b^10 + 9504 a^7 b^10 y + 4752 a^7 b^10 y^2 + 25740 a^7 b^16 + #> 45760 a^7 b^18 + 45760 a^7 b^18 y + 77520 a^7 b^26 + 24 a^7 y + 12 a^7 y^2 + 4 #> a^8 + 270 a^8 b^4 + 1980 a^8 b^6 + 1980 a^8 b^6 y + 2970 a^8 b^8 + 5940 a^8 b^8 #> y + 2970 a^8 b^8 y^2 + 25740 a^8 b^14 + 51480 a^8 b^16 + 51480 a^8 b^16 y + #> 125970 a^8 b^24 + 12 a^8 y + 12 a^8 y^2 + 4 a^8 y^3 + 60 a^9 b^2 + 660 a^9 b^4 #> + 660 a^9 b^4 y + 1320 a^9 b^6 + 2640 a^9 b^6 y + 1320 a^9 b^6 y^2 + 20020 a^9 #> b^12 + 45760 a^9 b^14 + 45760 a^9 b^14 y + 167960 a^9 b^22 + 6 a^10 + 132 a^10 #> b^2 + 132 a^10 b^2 y + 396 a^10 b^4 + 792 a^10 b^4 y + 396 a^10 b^4 y^2 + 12012 #> a^10 b^10 + 32032 a^10 b^12 + 32032 a^10 b^12 y + 184756 a^10 b^20 + 12 a^11 + #> 72 a^11 b^2 + 144 a^11 b^2 y + 72 a^11 b^2 y^2 + 5460 a^11 b^8 + 17472 a^11 #> b^10 + 17472 a^11 b^10 y + 167960 a^11 b^18 + 12 a^11 y + 6 a^12 + 1820 a^12 #> b^6 + 7280 a^12 b^8 + 7280 a^12 b^8 y + 125970 a^12 b^16 + 12 a^12 y + 6 a^12 #> y^2 + 420 a^13 b^4 + 2240 a^13 b^6 + 2240 a^13 b^6 y + 77520 a^13 b^14 + 60 #> a^14 b^2 + 480 a^14 b^4 + 480 a^14 b^4 y + 38760 a^14 b^12 + 4 a^15 + 64 a^15 #> b^2 + 64 a^15 b^2 y + 15504 a^15 b^10 + 4 a^16 + 4845 a^16 b^8 + 4 a^16 y + #> 1140 a^17 b^6 + 190 a^18 b^4 + 20 a^19 b^2 + a^20 + 4 b^2 + 4 b^2 y + 6 b^4 + #> 12 b^4 y + 6 b^4 y^2 + 4 b^6 + 12 b^6 y + 12 b^6 y^2 + 4 b^6 y^3 + b^8 + 4 b^8 #> y + 6 b^8 y^2 + 4 b^8 y^3 + b^8 y^4 + 4 b^10 + 12 b^12 + 12 b^12 y + 12 b^14 + #> 24 b^14 y + 12 b^14 y^2 + 4 b^16 + 12 b^16 y + 12 b^16 y^2 + 4 b^16 y^3 + 6 #> b^20 + 12 b^22 + 12 b^22 y + 6 b^24 + 12 b^24 y + 6 b^24 y^2 + 4 b^30 + 4 b^32 #> + 4 b^32 y + b^40 aderiv(p^2,x=4) #> mvp object algebraically equal to #> 240 x + 720 x^2 + 720 x^2 y + 5040 x^6 horner(p,1:3) #> mvp object algebraically equal to #> 6 + 8 x + 8 x y + 3 x^2 + 6 x^2 y + 3 x^2 y^2 + 8 x^5 + 6 x^6 + 6 x^6 y + 3 #> x^10"},{"path":"https://robinhankin.github.io/mvp/reference/mvp.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate polynomials, mvp objects — mvp","title":"Multivariate polynomials, mvp objects — mvp","text":"Create, test , coerce , mvp objects","code":""},{"path":"https://robinhankin.github.io/mvp/reference/mvp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multivariate polynomials, mvp objects — mvp","text":"","code":"mvp(vars, powers, coeffs) is_ok_mvp(vars,powers,coeffs) is.mvp(x) as.mvp(x) # S3 method for class 'character' as.mvp(x) # S3 method for class 'list' as.mvp(x) # S3 method for class 'mpoly' as.mvp(x) # S3 method for class 'mvp' as.mvp(x) # S3 method for class 'numeric' as.mvp(x)"},{"path":"https://robinhankin.github.io/mvp/reference/mvp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multivariate polynomials, mvp objects — mvp","text":"vars List variables comprising term mvp object powers List powers corresponding variables     vars argument coeffs Numeric vector corresponding coefficients     element var powers lists x Object coerced tested class mvp","code":""},{"path":"https://robinhankin.github.io/mvp/reference/mvp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multivariate polynomials, mvp objects — mvp","text":"Function mvp() formal creation mechanism mvp objects.  However, user-friendly; better use .mvp() day--day use. Function is_ok_mvp() checks consistency arguments.","code":""},{"path":"https://robinhankin.github.io/mvp/reference/mvp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Multivariate polynomials, mvp objects — mvp","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/mvp/reference/mvp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multivariate polynomials, mvp objects — mvp","text":"","code":"mvp(list(\"x\", c(\"x\",\"y\"), \"a\", c(\"y\",\"x\")), list(1,1:2,3,c(-1,4)), 1:4) #> mvp object algebraically equal to #> 3 a^3 + x + 2 x y^2 + 4 x^4 y^-1  ## Note how the terms appear in an arbitrary order, as do ## the symbols within a term.  kahle  <- mvp(     vars   = split(cbind(letters,letters[c(26,1:25)]),rep(seq_len(26),each=2)),     powers = rep(list(1:2),26),     coeffs = 1:26 ) kahle #> mvp object algebraically equal to #> a b^2 + 14 a^2 z + 15 b c^2 + 2 c d^2 + 16 d e^2 + 3 e f^2 + 17 f g^2 + 4 g h^2 #> + 18 h i^2 + 5 i j^2 + 19 j k^2 + 6 k l^2 + 20 l m^2 + 7 m n^2 + 21 n o^2 + 8 o #> p^2 + 22 p q^2 + 9 q r^2 + 23 r s^2 + 10 s t^2 + 24 t u^2 + 11 u v^2 + 25 v w^2 #> + 12 w x^2 + 26 x y^2 + 13 y z^2 ## again note arbitrary order of terms and symbols within a term  ## Standard arithmetic rules apply:  a <- as.mvp(\"1 + 4*x*y + 7*z\") b <- as.mvp(\"-7*z + 3*x^34 - 2*z*x\")  a+b #> mvp object algebraically equal to #> 1 + 4 x y - 2 x z + 3 x^34 a*b^2 #> mvp object algebraically equal to #> 196 x y z^2 + 28 x z^2 + 196 x z^3 + 112 x^2 y z^2 + 4 x^2 z^2 + 28 x^2 z^3 + #> 16 x^3 y z^2 - 42 x^34 z - 294 x^34 z^2 - 168 x^35 y z - 12 x^35 z - 84 x^35 #> z^2 - 48 x^36 y z + 9 x^68 + 63 x^68 z + 36 x^69 y + 49 z^2 + 343 z^3  (a+b)*(a-b) == a^2-b^2 # should be TRUE #> [1] TRUE   ## variable \"xy\" is distinct from \"x*y\":  as.mvp(\"x + y + xy\")^2 #> mvp object algebraically equal to #> 2 x xy + 2 x y + x^2 + 2 xy y + xy^2 + y^2 as.mvp(paste(state.name[1:5],collapse=\"+\"))^2 #> mvp object algebraically equal to #> 2 Alabama Alaska + 2 Alabama Arizona + 2 Alabama Arkansas + 2 Alabama #> California + Alabama^2 + 2 Alaska Arizona + 2 Alaska Arkansas + 2 Alaska #> California + Alaska^2 + 2 Arizona Arkansas + 2 Arizona California + Arizona^2 + #> 2 Arkansas California + Arkansas^2 + California^2"},{"path":"https://robinhankin.github.io/mvp/reference/ooom.html","id":null,"dir":"Reference","previous_headings":"","what":"One over one minus a multivariate polynomial — ooom","title":"One over one minus a multivariate polynomial — ooom","text":"Uses Taylor's theorem give one one minus multipol","code":""},{"path":"https://robinhankin.github.io/mvp/reference/ooom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One over one minus a multivariate polynomial — ooom","text":"","code":"ooom(P,n)"},{"path":"https://robinhankin.github.io/mvp/reference/ooom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"One over one minus a multivariate polynomial — ooom","text":"n Order expansion P Multivariate polynomial","code":""},{"path":"https://robinhankin.github.io/mvp/reference/ooom.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"One over one minus a multivariate polynomial — ooom","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/mvp/reference/ooom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"One over one minus a multivariate polynomial — ooom","text":"","code":"ooom(\"x\",5) #> mvp object algebraically equal to #> 1 + x + x^2 + x^3 + x^4 + x^5 ooom(\"x\",5) * as.mvp(\"1-x\")  # 1 + O(x^6) #> mvp object algebraically equal to #> 1 - x^6   ooom(\"x+y\",4) #> mvp object algebraically equal to #> 1 + x + 2 x y + 3 x y^2 + 4 x y^3 + x^2 + 3 x^2 y + 6 x^2 y^2 + x^3 + 4 x^3 y + #> x^4 + y + y^2 + y^3 + y^4  \"x+y\" |> ooom(5) |> aderiv(x=2,y=1) #> mvp object algebraically equal to #> 6 + 24 x + 120 x y + 60 x^2 + 24 y + 60 y^2"},{"path":"https://robinhankin.github.io/mvp/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print methods for mvp objects — print","title":"Print methods for mvp objects — print","text":"Print methods mvp objects: print, mvp object coerced mpoly form mpoly print method used.","code":""},{"path":"https://robinhankin.github.io/mvp/reference/print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print methods for mvp objects — print","text":"","code":"# S3 method for class 'mvp' print(x, ...)"},{"path":"https://robinhankin.github.io/mvp/reference/print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print methods for mvp objects — print","text":"x Object class mvp, coerced mpoly form ... arguments","code":""},{"path":"https://robinhankin.github.io/mvp/reference/print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print methods for mvp objects — print","text":"Returns argument invisibly","code":""},{"path":"https://robinhankin.github.io/mvp/reference/print.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print methods for mvp objects — print","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/mvp/reference/print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print methods for mvp objects — print","text":"","code":"a <- rmvp(4) a #> mvp object algebraically equal to #> 2 + 2 a b c^3 + 4 a^2 + 3 b print(a) #> mvp object algebraically equal to #> 2 + 2 a b c^3 + 4 a^2 + 3 b print(a,stars=TRUE) #> mvp object algebraically equal to #> 2 + 2 * a * b * c**3 + 4 * a**2 + 3 * b print(a,varorder=rev(letters)) #> mvp object algebraically equal to #> 2 c^3 b a + 3 b + 4 a^2 + 2"},{"path":"https://robinhankin.github.io/mvp/reference/rmvp.html","id":null,"dir":"Reference","previous_headings":"","what":"Random multivariate polynomials — rmvp","title":"Random multivariate polynomials — rmvp","text":"Random multivariate polynomials, intended quick   “get going” examples mvp objects","code":""},{"path":"https://robinhankin.github.io/mvp/reference/rmvp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random multivariate polynomials — rmvp","text":"","code":"rhmvp(n=7,size=4,pow=6,symbols=6) rmvp(n=7,size=4,pow=6,symbols=6) rmvpp(n=30,size=9,pow=20,symbols=15) rmvppp(n=100,size=15,pow=99,symbols)"},{"path":"https://robinhankin.github.io/mvp/reference/rmvp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random multivariate polynomials — rmvp","text":"n Number terms generate size Maximum number symbols term pow Maximum power symbol symbols Symbols use; numeric, interpret first     symbols letters alphabet","code":""},{"path":"https://robinhankin.github.io/mvp/reference/rmvp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random multivariate polynomials — rmvp","text":"Function rhmvp() returns random homogeneous mvp. Function rmvp() returns possibly nonhomogenous mvp functions rmvpp() rmvppp() return, default, progressively complicated mvp objects.  Function rmvppp() returns polynomial multi-letter variable names.","code":""},{"path":"https://robinhankin.github.io/mvp/reference/rmvp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random multivariate polynomials — rmvp","text":"Returns multivariate polynomial, object class mvp","code":""},{"path":"https://robinhankin.github.io/mvp/reference/rmvp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Random multivariate polynomials — rmvp","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/mvp/reference/rmvp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random multivariate polynomials — rmvp","text":"","code":"rhmvp() #> mvp object algebraically equal to #> 6 a b^2 c f^2 + 6 a^3 b^2 d + 5 b^2 c d^2 e + 7 b^2 d^3 e + 3 b^2 d^4 + 7 c d e #> f^3 + 6 d^3 e f^2 rmvp() #> mvp object algebraically equal to #> 17 + 6 a e + 3 a^2 b^2 + 4 c e + 7 f rmvpp() #> mvp object algebraically equal to #> 26 a d^2 i^2 j n o + 16 a h k^3 l^2 o + a h^5 k l^2 m o^2 + 17 a^2 e f^2 g h #> j^2 m^3 o^4 + 15 a^2 f l + 14 a^3 b^2 e^3 f g^2 i^3 l^2 n^3 + 20 a^3 b^3 f^2 j #> l n^2 o^3 + 2 a^3 d^2 e f^5 j^2 k^2 n + a^3 g^4 h^2 i j k^2 l n + 18 a^4 b c #> f^4 j^4 k l^3 m^2 + 19 a^4 b c^2 i^2 j^4 m n + 3 b c e^2 f^3 h m^3 o + 9 b c^2 #> e^2 j k^6 n^2 o^3 + 22 b c^3 h^4 i^2 j l^5 n o + 17 b d^2 e^2 f^2 m o + 2 b e^2 #> f j k^2 l m^2 + 24 b^2 f^4 k m^4 + 4 b^3 c d e^3 f^2 i^3 k^3 m^3 + 12 b^3 f h k #> o^4 + 9 b^4 d h i^6 j^4 k o^3 + 20 c g k^2 n + 19 c m o + 27 c^2 e^2 g h l^4 m #> + 12 c^2 g j l m^2 o^2 + 10 d h + 27 d^2 e h i^4 j k l m o + 14 d^2 g i^2 l o^3 #> + 9 d^4 f^2 i m n^2 + 4 e g j + 17 e g k l n o rmvppp() #> mvp object algebraically equal to #> 31 + 15 ar au bx cx^2 ev gs^3 gv^2 gz iv^2 iz + 57 ar au^6 av^5 bw^5 bx^3 dr^7 #> dz^9 fu^7 fw fy gz^3 hx^3 iv^2 ix^6 iy + 98 ar av aw^2 bv^2 bw bz fz gz^3 hs #> hy^2 ir^2 iw^2 + 6 ar av cs dz ex^2 fz^2 gt hw iv^2 + 50 ar az^2 br^2 bw bx^4 #> cs er hw^4 hx^2 ir is^2 + 72 ar^2 at^6 br^6 bu^8 bz^8 cr^5 cz^7 dx^9 ev^10 fz^8 #> gx^2 hw^9 ir^4 it^3 iu^10 + 94 ar^2 au^3 aw^3 az^5 bz^3 dr^4 dx^7 er^5 fw^6 #> fy^3 gx^7 gy^7 ht^7 iv^5 iw^4 + 36 ar^3 as^6 bt^2 bx^4 dr^3 et^4 ew^2 gu^2 gy #> gz^4 hw^4 iv^3 iw^3 ix + 62 ar^3 as^6 cr^5 cu^4 cw^3 ds^5 ew^5 ex^5 ez^6 fu^8 #> gu^4 ht^3 ir^8 iz^8 + 20 ar^3 av ay cy^3 dx^3 dy ew ey ft fw^2 gw^2 gx^2 ix + 3 #> ar^3 ax by^5 cx dt^3 dv^3 fr^3 fu fx gr^2 gs^2 gz^2 ir^4 it^7 iv + 46 ar^3 bz^2 #> cu dr^2 dy^5 ez^3 fs fv^2 fz gr^3 gu^3 gz hs^2 ir^4 iv^2 + 23 ar^3 cs ct^7 cu^4 #> cw^4 dv^5 dw dy^7 ew^2 ey^2 fs^2 ft^2 gr^6 gv^2 hy^5 + 46 ar^4 as^6 aw^6 az^4 #> dt^3 dx^8 ey^3 fs^7 fx^9 fy^10 fz^11 gv^5 hu^5 hv^4 ir^8 + 15 ar^4 bu^8 by^5 #> bz^9 eu^6 ey ez^2 fr^7 fs^5 fw^4 gs^2 gu^7 hs hv^5 iw^5 + 4 ar^5 ax^10 bs^8 #> bu^6 ct^6 dv^8 et^7 ey^3 ft^4 fw^6 gw^6 gy^10 ir^5 iw^5 ix^6 + 63 ar^5 bt^6 #> ds^3 du^4 dw^3 dy^2 es^6 ev^4 ey^5 ft^5 fx^6 gt^5 ht^4 hz iz^5 + 81 ar^6 as #> ax^7 az br^5 cv^2 dt^3 fx^3 fy^4 hs^6 hw^5 hx^5 iu^6 iv^5 iz^2 + 98 ar^6 at^3 #> bt^8 bx^5 er^6 es^7 ey^8 fw^3 fy^3 gs^6 gw^4 gy^2 hr^2 ix^3 + 15 ar^6 ay^4 cw^6 #> cy^9 cz^8 ds^5 et^4 fr^9 gr^3 gy^6 hr^4 hu^4 hv^4 hx^5 hy^5 + 4 ar^6 bz^4 cu^3 #> cw^7 dv^7 ev^5 ey^7 fs^9 fy^7 fz^4 hr^6 hv^6 iu^12 iv^9 iz^5 + 2 ar^7 au aw^4 #> ct^11 cw^4 dv dw^7 fy^5 gu^3 gv^5 gy^5 hr^2 hu^4 iw^9 iy^2 + 66 ar^7 by^3 cs^7 #> cu^6 cx^6 dx^4 ex^5 ft^8 gs^4 gv^4 gw^9 ir^3 iu^6 iw^7 iy^5 + 55 ar^8 av^2 br^4 #> bv^3 ct^6 dr^2 dt^3 dy^4 ey^5 ft^5 gu gy^5 gz^4 hu^6 ix^5 + 18 ar^8 av^8 ax^3 #> bv^5 cr^8 cv^8 es^9 fx^6 fz gr^7 gv^3 hv^9 hx^4 hy^6 ir^5 + 4 as at^3 ay^4 az^2 #> cw dt^4 et^2 fu^4 gs hv^2 hw^2 hx iw^2 + 18 as au^6 aw^3 bs^7 bx^3 cs^3 cw^9 #> dw^5 ex^8 fw^6 gx^9 gy^9 hr^2 hs^6 iz^3 + 88 as^2 au^3 aw bs^2 bv^2 cr du^2 #> er^4 es^2 fv gt^4 gv^2 hv^3 hw^5 ix^3 + 2 as^3 av^5 aw^5 br^2 bw^6 dr^6 ds^6 #> ey^4 fr^10 fu^2 fx^7 gs^4 gt^5 is^3 iw^6 + 7 as^3 av^6 bw cs^5 ct^4 cy^6 dr^5 #> dv^6 er^2 ey^7 fs^5 ft^3 gx^7 ht^4 is^4 + 73 as^4 au^3 av^10 az^7 br^5 dx^9 #> dz^4 ew^4 ez^9 fu^3 hx^7 hz^5 iu^4 ix^4 iz^8 + 25 as^6 at^8 ax^2 bz^5 eu^8 ex^5 #> fu^3 fz^7 gr^10 gy^11 hu^5 hz^6 iu^7 iv^8 iw^4 + 47 as^9 at^4 bv^5 cs^6 dv^4 #> dx^7 dz^8 et^4 ft^9 gs^5 gz^9 hw^8 is^5 iy^5 iz^9 + 63 as^9 ay^3 br^9 bv^5 bw^6 #> cr dy^6 eu^8 ex^7 fu^9 gy^9 hs^2 hz^8 it^6 ix^6 + 79 at^2 br dt dx ft hu^2 is + #> 54 at^5 av^6 aw^13 ax^12 cr^2 cu^5 cy^5 ds^4 du^4 ev^8 ex^4 fs^8 fv^8 gv^7 gx^3 #> + 61 at^5 ay^11 br^4 bs^14 bt^3 bx^6 cw^7 dv^9 es^5 et^3 fr^6 fv^3 gr^9 ir^3 #> iv^6 + 99 at^6 bs^5 cr^2 cv^10 du^9 dz^6 eu^7 gx^6 hr^5 hu^5 hx^7 hy^5 ir^3 #> iy^4 iz^5 + 25 at^9 au^6 br^3 cr^3 cv^6 cx^6 dr^5 dv^10 es^5 fr^8 gs^7 gt^6 #> gw^7 hs^7 iw^5 + 31 au ay^5 cs^2 du^2 ev fx^4 fy^3 gx gz^2 hv^3 hy iw^3 iz^2 + #> 78 au az bu bx cu ds^2 du ex + 3 au bs^2 cr ds^2 es ey fz^5 ht hu^3 hv^2 hy #> hz^4 iu^2 iz^2 + 67 au bu^2 bv^5 by^3 cs^4 dt^2 et ey^3 fv gw^7 gx^3 hu^4 hz^3 #> iu^3 iz^5 + 17 au dw + 79 au^2 az^5 bv^2 cr^3 cy^2 dw^4 fr^3 fz^2 gr^2 gv^4 #> gw^4 iv^2 iw iz^3 + 76 au^3 br^3 bu^2 cr^5 ds^3 dv^3 dx^2 es^4 ex gw gx^4 hw^8 #> hy^5 is^3 iz^3 + 82 au^4 aw^3 br^3 bt^3 bv^3 ct^2 ds^8 dx^3 er ew^3 fw^2 hr^5 #> iu iw^3 iz^3 + 90 au^4 cu^6 dr^7 dt^5 dy^2 dz^8 er^7 et^3 gv^5 gz^5 hy^5 ir^5 #> iv^2 iw^5 iy^8 + 64 au^5 az^7 bu^3 bv^5 eu^6 ex^4 fu^3 gv gw^3 hs^4 ht hu^4 #> hv^5 ir^5 ix^3 + 56 au^7 av^6 aw^7 cw^10 cx^8 dx^6 ew^6 ez^3 fv^6 fy^7 gy^7 #> hv^7 is it^5 ix^8 + 32 au^7 aw^5 az^8 bt^6 ds^7 dx^10 dy^7 eu^7 fx^5 fz^7 gw^8 #> gy ht^5 ir^4 iz^4 + 17 au^8 ay^4 bs^4 bu^6 cy^2 cz^8 dv^3 dw^7 dx^5 dz^6 ew^6 #> fy^3 gu gx^5 hr^8 + 81 au^10 cr^6 cx^2 dw^8 er^5 ex^2 ft^7 fu^5 fz^9 gw^4 gz^4 #> ht^3 hw^7 hy^5 iv + 90 av br ds ex gr^2 gz^2 ht iy + 6 av bx cr cw^3 cx^2 ds^2 #> dt dx gr^2 gt^3 hu^2 hw^2 iz + 95 av^2 aw^7 br^6 bw^5 cu^6 dx eu^3 fr^5 fs^4 #> fu^4 fx^3 gt^2 hv^3 is^3 ix^5 + 23 av^2 ay br^2 cu^2 dv^3 ew^3 ey^2 gx ht^2 hw #> + 96 av^2 bs^2 bx^3 cs^3 dt^8 du^3 es et^3 ew^4 fx^3 it^2 + 32 av^5 ax^4 bu^3 #> bv^4 cs cu^2 ey^5 ez^4 fu^3 gu^4 gv^2 hs^5 hx^3 hy^4 iv^3 + 67 av^6 ay^7 cr^6 #> cs^8 cy^2 du^9 dx^3 ex^9 fs^7 ft^5 fy^9 gw^5 hv^5 hz^8 iv^10 + 74 av^7 az^4 #> cu^5 cx^3 dy^5 ev^2 fr^6 gr gz^4 hs^3 ht^3 hx^2 iv^6 ix^4 iz^3 + 30 av^7 bt^4 #> bu^4 bw^3 ct^3 cu^6 cv^4 dx^5 ev^4 ex^2 ft^3 gt^2 hs^4 iv^6 ix^4 + 50 aw ax^2 #> bu^2 bw^2 er^2 ev ft iu^4 + 62 aw br^4 bu^2 bv^2 dv^6 es^5 ev^2 fu fw fx^5 fz^2 #> gr^2 gy^4 ht^3 + 89 aw cr fu iu^2 + 13 aw dz is + 37 aw^6 bv^3 bw^10 ct^8 cy^6 #> dw^7 et^4 fx^3 fy^2 gu^7 hs^4 ir^10 is^5 iw^6 iz^4 + 44 ax br dr dw fs^2 fz gw #> + 91 ax bz^2 dx dz ey^2 fw fx fy^2 gt hy ir iz^2 + 48 ax^3 bu^6 cx^5 dr^2 dt^2 #> er^4 eu^5 fr^2 ft fv^5 gw^5 gz^5 hv^5 hy^5 iy + 12 ay^2 br by^3 cx^2 dr^5 ex^4 #> fy^2 gr^5 gx^3 hu^7 hw^4 iu^7 iw^4 iz^7 + 100 ay^4 az^3 bx^4 cy^4 dt^5 dy^4 #> dz^8 er^5 ev^3 gr^6 gt gz^6 hw^5 hx^6 iz^10 + 2 az + 92 az br^4 bs^2 bt^2 cr^3 #> ct^5 dr^5 dv^2 es^2 gu^2 iu iv^3 ix^2 iz + 68 az^2 bw^5 cr^3 du^5 fs^2 ft fx gv #> hs hu hw^2 + 84 br^5 bv^5 bx^4 cs^5 dv^3 ex^6 ey^4 ez^3 fs^6 gs^6 gw^7 hu^6 #> hw^2 hy^3 iw^6 + 33 br^6 bu^6 bv^6 bw^3 bx^5 by^5 cv^9 ds^7 dw^9 fv^7 fy^5 gs^6 #> hw^4 is^4 iz^3 + 85 bs^2 bu^7 bv^7 bx^4 cs^5 cy^4 du^8 ew^3 fv^2 gt^3 gu^5 hv^5 #> hx^2 it^4 iy^4 + 80 bs^2 ct cy^2 cz dt es^3 gy gz^5 hv ir^2 is^2 it^2 iw^2 + 23 #> bs^2 ey it iw^2 + 82 bs^5 bu^7 bv^8 cu^3 cx^4 dr^4 dx^8 et^3 ez^5 fv^7 gu^5 #> gw^4 ht^3 hv^7 iv^4 + 50 bt by^5 cu cz dv es^3 ex ez^5 fs^2 fu^5 fy^2 gu^2 gw^3 #> hv^2 iw^3 + 60 bu cy^2 ex gu + 80 bv^5 bw^2 bx^3 by^3 cu^2 cv^3 cw^4 dx^4 dz #> et^3 fr^5 gx^6 gz^4 is^4 iy^7 + 3 bw^3 cr^4 cs^4 cz^7 dv^3 dw er^3 et^7 fr^6 #> fw^2 gu^4 gv^2 gz^2 hw^2 + 42 bw^7 by^4 ct^7 du^7 dz ew fz^4 gr^2 gu^4 hu^4 #> hy^2 hz^10 is^3 iu^6 iw^5 + bw^11 cr^9 ey^5 fu^6 fx^5 fy^6 gu^6 gx^5 hu^5 hw^5 #> is^7 it^8 iu^3 iw^6 iz^7 + 15 bx^2 by bz^3 cw es^3 ev^2 ey^2 fy^3 gu gw^2 gy^2 #> hr ht^2 iu + 66 bx^3 dv^2 er ev^2 fv^3 gy^6 hs hu^5 hv^4 hw^2 hz^3 it iz^2 + 53 #> bx^5 bz^4 cw^7 cz^3 es^10 ex^6 ft^4 fu^5 fx fz^8 hr^3 hs^6 iv^10 iy^2 + 22 bx^6 #> by^4 dt^8 dv^3 es^6 ev^9 ex^9 ey^9 fv^5 fy^3 gt^7 gv^4 gz^9 hr^6 ir^4 + 7 bz^6 #> cr cs cv^6 dx^3 dy^8 et^6 fz^5 gw^4 gx^5 hr^3 hs hv^3 hy^2 ix^2 + 14 ct^2 cy^2 #> dy ew^3 fs gs gv^3 gw^2 gx^2 hz^2 iy + 22 cu cy ds ev fx gr gs hy ir + 96 cv^4 #> cw du^3 ev^2 ey^3 gr^3 gz hs^3 ht^2 hu^3 hv ir + 95 cv^4 du dw dx^3 eu^2 ez^3 #> fx^3 gw^2 gx^2 hy^2 iu + 49 cz^3 fz^2 hu + 55 dt dz + 9 fu"},{"path":"https://robinhankin.github.io/mvp/reference/series.html","id":null,"dir":"Reference","previous_headings":"","what":"Decomposition of multivariate polynomials by powers — series","title":"Decomposition of multivariate polynomials by powers — series","text":"Power series multivariate polynomials,   various forms","code":""},{"path":"https://robinhankin.github.io/mvp/reference/series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decomposition of multivariate polynomials by powers — series","text":"","code":"trunc(S,n) truncall(S,n) trunc1(S,...) series(S,v,showsymb=TRUE) # S3 method for class 'series' print(x,...) onevarpow(S,...) taylor(S,vx,va,debug=FALSE) mvp_taylor_onevar(allnames,allpowers,coefficients, v, n) mvp_taylor_allvars(allnames,allpowers,coefficients, n) mvp_taylor_onepower_onevar(allnames, allpowers, coefficients, v, n) mvp_to_series(allnames, allpowers, coefficients, v)"},{"path":"https://robinhankin.github.io/mvp/reference/series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decomposition of multivariate polynomials by powers — series","text":"S Object class mvp n Non-negative integer specifying highest order retained v Variable take Taylor series respect .   missing,     total power term used (except series()     mandatory) x,... Object class series arguments,     passed print method; trunc1() list variables     truncate showsymb function series(), Boolean, default     TRUE meaning substitute variables like x_m_foo     (x-foo) readability reasons; see vignette     discussion vx,va,debug function taylor(), names variables     take series respect ; Boolean default FALSE     meaning return mvp TRUE meaning return     string passed eval() allnames,allpowers,coefficients Components mvp     objects","code":""},{"path":"https://robinhankin.github.io/mvp/reference/series.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Decomposition of multivariate polynomials by powers — series","text":"Function onevarpow() returns just terms   symbols corresponding named arguments powers equal   arguments' powers.  Thus:  , see terms x^1*y^2   extracted, corresponding arguments x=1,y=2. Function series() returns power series expansion powers   variable v.  value returned list three elements   named mvp, varpower, variablename.  first   element list mvp objects second integer   vector powers variable v (element variablename   character string holding variable name, argument v). Function trunc(S,n) returns terms S sum   powers variables \\(\\leq n\\).  Alternatively,   discards terms total power \\(>n\\). Function trunc1() similar trunc().  takes   mvp object arbitrary number named arguments,   names corresponding variables values corresponding   highest power variable retained.  Thus   trunc1(S,x=2,y=4) discard term variable x   raised power 3 , also term variable   y raised power 5 .  highest power   x 2 highest power y 4. Function truncall(S,n) discards term S   variable raised power greater n. Function series() returns object class series;   print method series objects sensitive value   getOption(\"mvp_mult_symbol\"); set \"*\" get   mpoly-compatible output. Function taylor() convenience wrapper series(). Functions mvp_taylor_onevar(), mvp_taylor_allvars()   mvp_to_series() low-level helper functions   intended user.","code":"onevarpow(as.mvp(\"x*y*z + 3*x*y^2 + 7*x*y^2*z^6 + x*y^3\"),x=1,y=2) mvp object algebraically equal to 3  +  7 z^6"},{"path":"https://robinhankin.github.io/mvp/reference/series.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Decomposition of multivariate polynomials by powers — series","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/mvp/reference/series.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decomposition of multivariate polynomials by powers — series","text":"","code":"trunc(as.mvp(\"1+x\")^6,2) #> mvp object algebraically equal to #> 1 + 6 x + 15 x^2  trunc(as.mvp(\"1+x+y\")^3,2)      # discards all terms with total power>2 #> mvp object algebraically equal to #> 1 + 3 x + 6 x y + 3 x^2 + 3 y + 3 y^2 trunc1(as.mvp(\"1+x+y\")^3,x=2)   # terms like y^3 are treated as constants #> mvp object algebraically equal to #> 1 + 3 x + 6 x y + 3 x y^2 + 3 x^2 + 3 x^2 y + 3 y + 3 y^2 + y^3  trunc(as.mvp(\"1+x+y^2\")^3,3)    # discards x^2y^2 term (total power=4>3) #> mvp object algebraically equal to #> 1 + 3 x + 6 x y^2 + 3 x^2 + x^3 + 3 y^2 truncall(as.mvp(\"1+x+y^2\")^3,3) # retains  x^2y^2 term (all vars to power 2) #> mvp object algebraically equal to #> 1 + 3 x + 6 x y^2 + 3 x^2 + 3 x^2 y^2 + x^3 + 3 y^2  onevarpow(as.mvp(\"1+x+x*y^2  + z*y^2*x\"),x=1,y=2) #> mvp object algebraically equal to #> 1 + z  (p2 <- rmvp(10)) #> mvp object algebraically equal to #> 9 + 3 a + 5 a b^3 d e + 5 a d^2 + 2 b d^3 + c^2 d + 6 d e^2 + 9 d f + d^2 e f + #> 10 e^2 series(p2,\"a\") #> a^0(9  +  2 b d^3  +  c^2 d  +  6 d e^2  +  9 d f  +  d^2 e f  +  10 e^2 )  +  #> a^1(3  +  5 b^3 d e  +  5 d^2 ) #>   # Works well with pipes:  f <- function(n){as.mvp(sub('n',n,'1+x^n*y'))} Reduce(`*`,lapply(1:6,f)) |> series('y') #> y^0(1)  + y^1(x  +  x^2  +  x^3  +  x^4  +  x^5  +  x^6 )  + y^2(x^3  +  x^4  +  #>  2 x^5  +  2 x^6  +  3 x^7  +  2 x^8  +  2 x^9  +  x^10  +  x^11 )  + y^3(x^6   #> +  x^7  +  2 x^8  +  3 x^9  +  3 x^10  +  3 x^11  +  3 x^12  +  2 x^13  +  x^14  #>  +  x^15 )  + y^4(x^10  +  x^11  +  2 x^12  +  2 x^13  +  3 x^14  +  2 x^15  +   #> 2 x^16  +  x^17  +  x^18 )  + y^5(x^15  +  x^16  +  x^17  +  x^18  +  x^19  +   #> x^20 )  + y^6(x^21 ) #>  Reduce(`*`,lapply(1:6,f)) |> series('x') #> x^0(1)  + x^1(y )  + x^2(y )  + x^3(y  +  y^2 )  + x^4(y  +  y^2 )  + x^5(y  +   #> 2 y^2 )  + x^6(y  +  2 y^2  +  y^3 )  + x^7(3 y^2  +  y^3 )  + x^8(2 y^2  +  2  #> y^3 )  + x^9(2 y^2  +  3 y^3 )  + x^10(y^2  +  3 y^3  +  y^4 )  + x^11(y^2  +   #> 3 y^3  +  y^4 )  + x^12(3 y^3  +  2 y^4 )  + x^13(2 y^3  +  2 y^4 )  + x^14(y^3  #>  +  3 y^4 )  + x^15(y^3  +  2 y^4  +  y^5 )  + x^16(2 y^4  +  y^5 )  + x^17(y^4  #>  +  y^5 )  + x^18(y^4  +  y^5 )  + x^19(y^5 )  + x^20(y^5 )  + x^21(y^6 ) #>    (p <- horner(\"x+y\",1:4)) #> mvp object algebraically equal to #> 1 + 2 x + 6 x y + 12 x y^2 + 3 x^2 + 12 x^2 y + 4 x^3 + 2 y + 3 y^2 + 4 y^3 onevarpow(p,x=2)   # coefficient of x^2 #> mvp object algebraically equal to #> 3 + 12 y onevarpow(p,x=3)   # coefficient of x^3 #> mvp object algebraically equal to #> 4   p |> trunc(2) #> mvp object algebraically equal to #> 1 + 2 x + 6 x y + 3 x^2 + 2 y + 3 y^2 p |> trunc1(x=2) #> mvp object algebraically equal to #> 1 + 2 x + 6 x y + 12 x y^2 + 3 x^2 + 12 x^2 y + 2 y + 3 y^2 + 4 y^3 (p |> subs(x=\"x+dx\") -p) |> trunc1(dx=2) #> mvp object algebraically equal to #> 2 dx + 6 dx x + 24 dx x y + 12 dx x^2 + 6 dx y + 12 dx y^2 + 3 dx^2 + 12 dx^2 x #> + 12 dx^2 y  # Nice example of Horner's method: (p <- as.mvp(\"x + y + 3*x*y\")) #> mvp object algebraically equal to #> x + 3 x y + y trunc(horner(p,1:5)*(1-p)^2,4)  # should be 1 #> mvp object algebraically equal to #> 1   ## Third order taylor expansion of f(x)=sin(x+y) for x=1.1, about x=1: (sinxpy <- horner(\"x+y\",c(0,1,0,-1/6,0,+1/120,0,-1/5040,0,1/362880)))  # sin(x+y) #> mvp object algebraically equal to #> x - 0.5 x y^2 + 0.04166667 x y^4 - 0.001388889 x y^6 + 0.00002480159 x y^8 - #> 0.5 x^2 y + 0.08333333 x^2 y^3 - 0.004166667 x^2 y^5 + 0.00009920635 x^2 y^7 - #> 0.1666667 x^3 + 0.08333333 x^3 y^2 - 0.006944444 x^3 y^4 + 0.0002314815 x^3 y^6 #> + 0.04166667 x^4 y - 0.006944444 x^4 y^3 + 0.0003472222 x^4 y^5 + 0.008333333 #> x^5 - 0.004166667 x^5 y^2 + 0.0003472222 x^5 y^4 - 0.001388889 x^6 y + #> 0.0002314815 x^6 y^3 - 0.0001984127 x^7 + 0.00009920635 x^7 y^2 + 0.00002480159 #> x^8 y + 0.000002755732 x^9 + y - 0.1666667 y^3 + 0.008333333 y^5 - 0.0001984127 #> y^7 + 0.000002755732 y^9 dx <- as.mvp(\"dx\") t3 <- sinxpy  + aderiv(sinxpy,x=1)*dx + aderiv(sinxpy,x=2)*dx^2/2 + aderiv(sinxpy,x=3)*dx^3/6 t3 <- t3 |> subs(x=1,dx=0.1)  # t3 = Taylor expansion of sin(y+1.1) t3 |> subs(y=0.3)  - sin(1.4)  # numeric; should be small #> [1] -3.039554e-06"},{"path":"https://robinhankin.github.io/mvp/reference/special.html","id":null,"dir":"Reference","previous_headings":"","what":"Various functions to create simple multivariate polynomials — special","title":"Various functions to create simple multivariate polynomials — special","text":"Various functions create simple mvp objects single-term, homogeneous, constant multivariate polynomials.","code":""},{"path":"https://robinhankin.github.io/mvp/reference/special.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Various functions to create simple multivariate polynomials — special","text":"","code":"product(v,symbols=letters) homog(d,power=1,symbols=letters) linear(x,power=1,symbols=letters) xyz(n,symbols=letters) numeric_to_mvp(x)"},{"path":"https://robinhankin.github.io/mvp/reference/special.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Various functions to create simple multivariate polynomials — special","text":"d,n integer; generally, dimension arity     resulting mvp object v,power Integer vector powers x Numeric vector coefficients symbols Character vector symbols","code":""},{"path":"https://robinhankin.github.io/mvp/reference/special.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Various functions to create simple multivariate polynomials — special","text":"functions documented return mvp object","code":""},{"path":"https://robinhankin.github.io/mvp/reference/special.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Various functions to create simple multivariate polynomials — special","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/mvp/reference/special.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Various functions to create simple multivariate polynomials — special","text":"functions related equivalents multipol spray packages, exactly . Function constant() documented constant.Rd, listed convenience.","code":""},{"path":[]},{"path":"https://robinhankin.github.io/mvp/reference/special.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Various functions to create simple multivariate polynomials — special","text":"","code":"product(1:3)        #      a * b^2 * c^3 #> mvp object algebraically equal to #> a b^2 c^3 homog(3)            #      a + b + c #> mvp object algebraically equal to #> a + b + c homog(3,2)          #      a^2  + a b + a c + b^2 + b c + c^2 #> mvp object algebraically equal to #> a b + a c + a^2 + b c + b^2 + c^2 linear(1:3)         #      1*a + 2*b + 3*c #> mvp object algebraically equal to #> a + 2 b + 3 c constant(5)         #      5 #> mvp object algebraically equal to #> 5 xyz(5)              #      a*b*c*d*e #> mvp object algebraically equal to #> a b c d e"},{"path":"https://robinhankin.github.io/mvp/reference/subs.html","id":null,"dir":"Reference","previous_headings":"","what":"Substitution — subs","title":"Substitution — subs","text":"Substitute symbols mvp object numbers   multivariate polynomials","code":""},{"path":"https://robinhankin.github.io/mvp/reference/subs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substitution — subs","text":"","code":"subs(S, ..., drop = TRUE) subsy(S, ..., drop = TRUE) subvec(S, ...) subsmvp(S,v,X) varchange(S,...) varchange_formal(S,old,new) namechanger(x,old,new)"},{"path":"https://robinhankin.github.io/mvp/reference/subs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substitution — subs","text":"S,X Multivariate polynomials ... named arguments corresponding variables substitute drop Boolean default TRUE meaning return     scalar (constant) place constant mvp object v string corresponding variable substitute old,new,x old new variable names respectively; x   character vector","code":""},{"path":"https://robinhankin.github.io/mvp/reference/subs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Substitution — subs","text":"Functions subs(), subsy() subsmvp() return   multivariate polynomial unless drop TRUE   case length one numeric vector returned.  Function   subvec() returns numeric vector (sic! output inherits   order arguments).","code":""},{"path":"https://robinhankin.github.io/mvp/reference/subs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Substitution — subs","text":"Function subs() substitutes variables mvp objects, using natural R idiom.  Observe type substitution sensitive order: Functions subsy() subsmvp() lower-level functions, really intended end-user.  Function subsy() substitutes variables numeric values (order matters variable substituted ).  Function subsmpv() takes mvp object substitutes another mvp object specific symbol. Function subvec() substitutes symbols S numerical values.  vectorised ellipsis arguments recycling rules names behaviour inherited cbind(). However, first element ... matrix, interpreted rows, symbol names given matrix column names; arguments ignored.  Unlike subs(), function generally useful symbols given value; unassigned symbols take value zero. Function varchange() makes formal variable substitution. useful can take non-standard variable names “(-b)” “?”, used taylor().  Function varchange_formal() task, takes two character vectors, old new, might convenient passing named arguments.  Remember non-standard names might need quoted; also might need escape characters, see examples.  Function namechanger() low-level helper function uses regular expression idiom substitute variable names.","code":"> p <- as.mvp(\"a b^2\") > subs(p,a=\"b\",b=\"x\") mvp object algebraically equal to x^3 > subs(p,b=\"x\",a=\"b\")  # same arguments, different order mvp object algebraically equal to b x^2"},{"path":"https://robinhankin.github.io/mvp/reference/subs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Substitution — subs","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/mvp/reference/subs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Substitution — subs","text":"","code":"p <- rmvp(6,2,2,letters[1:3]) p #> mvp object algebraically equal to #> 10 a + a b + 6 b + 4 b^2 subs(p,a=1) #> mvp object algebraically equal to #> 10 + 7 b + 4 b^2 subs(p,a=1,b=2) #> [1] 40  subs(p,a=\"1+b x^3\",b=\"1-y\") #> mvp object algebraically equal to #> 21 + 11 x^3 - 12 x^3 y + x^3 y^2 - 15 y + 4 y^2 subs(p,a=1,b=2,c=3,drop=FALSE) #> mvp object algebraically equal to #> 40  do.call(subs,c(list(as.mvp(\"z\")),rep(c(z=\"C+z^2\"),5))) #> mvp object algebraically equal to #> C + 2 C z^16 + 4 C z^24 + 8 C z^28 + 16 C z^30 + C^2 + 4 C^2 z^8 + 8 C^2 z^12 + #> 16 C^2 z^14 + 6 C^2 z^16 + 24 C^2 z^20 + 48 C^2 z^22 + 28 C^2 z^24 + 112 C^2 #> z^26 + 120 C^2 z^28 + 2 C^3 + 8 C^3 z^4 + 16 C^3 z^6 + 16 C^3 z^8 + 48 C^3 z^10 #> + 80 C^3 z^12 + 48 C^3 z^14 + 60 C^3 z^16 + 240 C^3 z^18 + 320 C^3 z^20 + 336 #> C^3 z^22 + 728 C^3 z^24 + 560 C^3 z^26 + 5 C^4 + 16 C^4 z^2 + 40 C^4 z^4 + 64 #> C^4 z^6 + 156 C^4 z^8 + 256 C^4 z^10 + 248 C^4 z^12 + 480 C^4 z^14 + 1150 C^4 #> z^16 + 1440 C^4 z^18 + 1848 C^4 z^20 + 2912 C^4 z^22 + 1820 C^4 z^24 + 14 C^5 + #> 48 C^5 z^2 + 120 C^5 z^4 + 304 C^5 z^6 + 560 C^5 z^8 + 816 C^5 z^10 + 1736 C^5 #> z^12 + 3440 C^5 z^14 + 4500 C^5 z^16 + 6160 C^5 z^18 + 8008 C^5 z^20 + 4368 C^5 #> z^22 + 26 C^6 + 112 C^6 z^2 + 360 C^6 z^4 + 832 C^6 z^6 + 1648 C^6 z^8 + 3696 #> C^6 z^10 + 7000 C^6 z^12 + 9888 C^6 z^14 + 13860 C^6 z^16 + 16016 C^6 z^18 + #> 8008 C^6 z^20 + 44 C^7 + 240 C^7 z^2 + 784 C^7 z^4 + 2048 C^7 z^6 + 5040 C^7 #> z^8 + 9968 C^7 z^10 + 15456 C^7 z^12 + 22176 C^7 z^14 + 24024 C^7 z^16 + 11440 #> C^7 z^18 + 69 C^8 + 416 C^8 z^2 + 1536 C^8 z^4 + 4480 C^8 z^6 + 9940 C^8 z^8 + #> 17280 C^8 z^10 + 25872 C^8 z^12 + 27456 C^8 z^14 + 12870 C^8 z^16 + 94 C^9 + #> 640 C^9 z^2 + 2520 C^9 z^4 + 6800 C^9 z^6 + 13740 C^9 z^8 + 22176 C^9 z^10 + #> 24024 C^9 z^12 + 11440 C^9 z^14 + 114 C^10 + 816 C^10 z^2 + 3040 C^10 z^4 + #> 7600 C^10 z^6 + 13860 C^10 z^8 + 16016 C^10 z^10 + 8008 C^10 z^12 + 116 C^11 + #> 800 C^11 z^2 + 2784 C^11 z^4 + 6160 C^11 z^6 + 8008 C^11 z^8 + 4368 C^11 z^10 + #> 94 C^12 + 608 C^12 z^2 + 1848 C^12 z^4 + 2912 C^12 z^6 + 1820 C^12 z^8 + 60 #> C^13 + 336 C^13 z^2 + 728 C^13 z^4 + 560 C^13 z^6 + 28 C^14 + 112 C^14 z^2 + #> 120 C^14 z^4 + 8 C^15 + 16 C^15 z^2 + C^16 + z^32  subvec(p,a=1,b=2,c=1:5)   # supply a named list of vectors #> [1] 40 40 40 40 40  M <- matrix(sample(1:3,26*3,replace=TRUE),ncol=26) colnames(M) <- letters rownames(M) <- c(\"Huey\", \"Dewie\", \"Louie\") subvec(kahle(r=3,p=1:3),M)  # supply a matrix #>  Huey Dewie Louie  #>   989  2409  1134   varchange(as.mvp(\"1+x+xy + x*y\"),x=\"newx\") # variable xy unchanged #> mvp object algebraically equal to #> 1 + newx + newx y + xy  kahle(5,3,1:3) |> subs(a=\"a + delta\") #> mvp object algebraically equal to #> 2 a b delta e^3 + 3 a b^2 c delta^2 + a d^3 e^2 + a^2 b e^3 + 3 a^2 b^2 c delta #> + a^3 b^2 c + b delta^2 e^3 + b^2 c delta^3 + b^3 c^2 d + c^3 d^2 e + d^3 delta #> e^2  varchange(p,a=\"]\")  # nonstandard variable names OK #> mvp object algebraically equal to #> 10 ] + ] b + 6 b + 4 b^2  varchange_formal(p,\"\\\\]\",\"a\") #> mvp object algebraically equal to #> 10 a + a b + 6 b + 4 b^2"},{"path":"https://robinhankin.github.io/mvp/reference/summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary methods for mvp objects — summary","title":"Summary methods for mvp objects — summary","text":"Summary methods mvp objects extraction typical terms","code":""},{"path":"https://robinhankin.github.io/mvp/reference/summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary methods for mvp objects — summary","text":"","code":"# S3 method for class 'mvp' summary(object, ...) # S3 method for class 'summary.mvp' print(x, ...) rtypical(object,n=3)"},{"path":"https://robinhankin.github.io/mvp/reference/summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary methods for mvp objects — summary","text":"x,object Multivariate polynomial, class mvp n rtypical(), number terms (addition     constant) select ... arguments, currently ignored","code":""},{"path":"https://robinhankin.github.io/mvp/reference/summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary methods for mvp objects — summary","text":"summary method prints list interesting facts mvp object longest term highest power.  Function rtypical() extracts constant present, random selection terms argument.","code":""},{"path":"https://robinhankin.github.io/mvp/reference/summary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary methods for mvp objects — summary","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/mvp/reference/summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary methods for mvp objects — summary","text":"","code":"summary(rmvp(40)) #> mvp object. #> Number of terms: 35  #> Number of distinct symbols: 6  #> Highest power: 4  #> Longest term:  4  #> Has negative powers:  FALSE  #> Constant:  90  rtypical(rmvp(40)) #> mvp object algebraically equal to #> 61 + 54 a + 2 a^2 b^4 + 5 b c e"},{"path":"https://robinhankin.github.io/mvp/reference/zero.html","id":null,"dir":"Reference","previous_headings":"","what":"The zero polynomial — zero","title":"The zero polynomial — zero","text":"Test multivariate polynomial zero","code":""},{"path":"https://robinhankin.github.io/mvp/reference/zero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The zero polynomial — zero","text":"","code":"is.zero(x)"},{"path":"https://robinhankin.github.io/mvp/reference/zero.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The zero polynomial — zero","text":"x Object class mvp","code":""},{"path":"https://robinhankin.github.io/mvp/reference/zero.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The zero polynomial — zero","text":"Function .zero() returns TRUE x indeed   zero polynomial.  defined length(vars(x))==0   reasons efficiency, conceptually returns   x==constant(0). (Use constant(0) create zero polynomial).","code":""},{"path":"https://robinhankin.github.io/mvp/reference/zero.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The zero polynomial — zero","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/mvp/reference/zero.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"The zero polynomial — zero","text":"expected zero polynomial problematic (cf freegroup permutations packages, similar issues require extensive special case treatment).  seems work fine, testament robust coding STL. general mvp object something like {{\"x\" -> 3, \"y\" -> 5} -> 6, {\"x\" -> 1, \"z\" -> 8} -> -7}} \\(6x^3y^5-7xz^8\\).  zero polynomial just {}.  Neat, eh?","code":""},{"path":[]},{"path":"https://robinhankin.github.io/mvp/reference/zero.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The zero polynomial — zero","text":"","code":"constant(0) #> mvp object algebraically equal to #> 0  t1 <- as.mvp(\"x+y\") t2 <- as.mvp(\"x-y\")  stopifnot(is.zero(t1*t2-as.mvp(\"x^2-y^2\")))"},{"path":"https://robinhankin.github.io/mvp/news/index.html","id":"mvp-11-1","dir":"Changelog","previous_headings":"","what":"mvp 1.1-1","title":"mvp 1.1-1","text":"C++-18 constructions","code":""},{"path":"https://robinhankin.github.io/mvp/news/index.html","id":"mvp-11-0","dir":"Changelog","previous_headings":"","what":"mvp 1.1-0","title":"mvp 1.1-0","text":"C++-17 constructions efficient exponentiation","code":""},{"path":"https://robinhankin.github.io/mvp/news/index.html","id":"mvp-10-19","dir":"Changelog","previous_headings":"","what":"mvp 1.0-19","title":"mvp 1.0-19","text":"remove mathjax dependency approximate equality","code":""},{"path":"https://robinhankin.github.io/mvp/news/index.html","id":"mvp-10-18","dir":"Changelog","previous_headings":"","what":"mvp 1.0-18","title":"mvp 1.0-18","text":"CRAN release: 2025-01-31 pure extraction code conduct contributing guide pkgdown","code":""},{"path":"https://robinhankin.github.io/mvp/news/index.html","id":"mvp-10-17","dir":"Changelog","previous_headings":"","what":"mvp 1.0-17","title":"mvp 1.0-17","text":"single-letter symbols bugfixes vectorized exponentiation","code":""}]
